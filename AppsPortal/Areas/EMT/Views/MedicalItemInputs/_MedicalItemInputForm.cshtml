@model MedicalItemInputUpdateModel
@using (Html.BeginForm("MedicalItemInput", "MedicalItemInputs", new { Area = "EMT" }, FormMethod.Post, new { id = "MedicalItemInputForm", @class = "main-form" }))
{
    <h3>@resxPages.Details</h3>
    @Html.AntiForgeryToken()
   
    @Html.FormHiddenFields(model => model.MedicalItemInputGUID)
    @Html.HiddenFor(model=>model.ConfirmedReceived)
    <div class="row">
        <div class="col-lg-5 col-md-5 col-sm-8 col-xs-12">

            <div class="form-group">
                @Html.Label(resxDbFields.DispatchDate)
                @Html.EditorFor(model => model.DeliveryDate, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
            </div>
            <div class="form-group HANDLER">
                @Html.Label(resxDbFields.ProvidedByOrganizationInstanceGUID)
                @Html.DropDownListFor(model => model.ProvidedByOrganizationInstanceGUID, new DropDownList().OrganizationsInstancesAcronymByProfileAll(), "", new
                {
               style = "width:100%",
               @class = "form-control select2-basic-search"
           })
            </div>
            <div class="form-group HANDLER">
                @Html.Label(resxDbFields.Partner)
                @Html.DropDownListFor(model => model.ProcuredByOrganizationInstanceGUID, new DropDownList().OrganizationsInstancesAcronymByProfileAll(), "", new
                {
               style = "width:100%",
               @class = "form-control select2-basic-search",
               onchange = "UpdateDropDownList([$(this).val()], [{ DropDownListID : 'MedicalPharmacyGUID', Action : 'RemoteMedicalPharmacyByOrganizationInsatance'}]);"
           })
            </div>
            <div class="form-group HANDLER">
                @Html.Label(resxDbFields.WarehouseGUID)
                @Html.DropDownListFor(model => model.MedicalPharmacyGUID, new DropDownList().MedicalPharmacyByOrganizationInsatance(Model.ProcuredByOrganizationInstanceGUID, true), "", new { style = "width:100%", @class = "form-control select2-basic-search" })
            </div>
            <div class="form-group">
                @Html.Label(resxDbFields.CreatedBy)
                @Html.DisplayFor(model => model.CreatedBy, new { htmlAttributes = new { @class = "form-control" } })
                - @Html.Label(resxDbFields.CreatedOn)
                @Html.DisplayFor(model => model.CreatedOn, new { htmlAttributes = new { @class = "form-control" } })
            </div>
            <div id="MedicalItemInputFormControls" class="form-group form-footer">
                @if (Model.MedicalItemInputGUID == Guid.Empty)
                {
                    @Html.CreateButton(Permissions.MedicalItemInput.Create, Apps.EMT)
                }
                else
                {
                    if (Model.Active)
                    {
                        @Html.UpdateButton(Permissions.MedicalItemInput.Update, Apps.EMT)
                        @Html.CreateNewButton(Permissions.MedicalItemInput.Create, Apps.EMT, Url.Action("/Create", new { Area = "EMT" }))
                        @Html.DeleteButton(Permissions.MedicalItemInput.Delete, Apps.EMT)
                        <button type="button" title="Transfer Dispatched Partner Warehouse Items to Partner Pharmacies" class="btnCreate Modal-Link btn pull-right btn-default" data-url="@Url.Action("MedicalItemInputTransferCreate", "MedicalItemInputs", new { FK = Model.MedicalItemInputGUID })"><i class="fa fa-exchange "></i></button>
                    }
                    else
                    {
                        @Html.RestoreButton(Permissions.MedicalItemInput.Restore, Apps.EMT)
                    }
                }
                @Html.BackToList(Url.Action("Index", "MedicalItemInputs", new { Area = "EMT" }))
            </div>
        </div>
    </div>
}
