@model PartnersCapacityAssessmentDocTitleUpdateModel

@using (Html.BeginForm("", "", new { Area = "PCA" }, FormMethod.Post, new { id = "SupportDocForm" }))
{
    @Html.AntiForgeryToken()
    string ModalTitle = Model.PartnersCapacityAssessmentDocTitleGUID.ToString() == Guid.Empty.ToString() ? resxDbFields.SupportingDocuments : resxDbFields.SupportingDocuments;
    @Html.Partial("_ModalHeader", ModalTitle)
    <div class="modal-body">
        @Html.HiddenFor(model => model.PartnersCapacityAssessmentDocTitleGUID)
        @if (Model.SupportDocTitle.ToLower() == "other")
        {
            <div class="form-group">
                @Html.LabelFor(model => model.SupportDocTitle)
                @Html.EditorFor(model => model.SupportDocTitle, new { htmlAttributes = new { @class = "form-control PageTitle", autocomplete = "off" } })
            </div>
        }
        else
        {
            @Html.HiddenFor(model => model.SupportDocTitle)
        }

        <div class="form-group" id="UploadFile">
            <label for="SupportingDocuments">@resxDbFields.SupportingDocuments</label>
            <div id="fine-uploader-manual-trigger"></div>
        </div>
    </div>
    <div class="modal-footer form-footer">
        <input id="my-select-files-btn" type="button" value="@resxUIControls.BrowseFiles" class="btn btn-default" />
        @Html.CreateButtonNoPermission()
    </div>
}
<script type="text/template" id="qq-template-manual-trigger">
    <div class="qq-uploader-selector qq-uploader" qq-drop-area-text="Drop files here">
        <div class="qq-total-progress-bar-container-selector qq-total-progress-bar-container">
            <div role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" class="qq-total-progress-bar-selector qq-progress-bar qq-total-progress-bar"></div>
        </div>
        <div class="qq-upload-drop-area-selector qq-upload-drop-area" qq-hide-dropzone>
            <span class="qq-upload-drop-area-text-selector"></span>
        </div>
        <div class="buttons">
            <div class="qq-upload-button-selector qq-upload-button hidden">
                <div id="btn-upload-files">@resxUIControls.BrowseFiles</div>
            </div>
            <button type="button" id="trigger-upload" class="btn btn-primary hidden">
                <i class="icon-upload icon-white"></i> @resxUIControls.Upload
            </button>
        </div>
        <span class="qq-drop-processing-selector qq-drop-processing">
            <span>@resxPages.ProcessingDroppedFiles...</span>
            <span class="qq-drop-processing-spinner-selector qq-drop-processing-spinner"></span>
        </span>
        <ul class="qq-upload-list-selector qq-upload-list" aria-live="polite" aria-relevant="additions removals">
            <li>
                <div class="qq-progress-bar-container-selector">
                    <div role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" class="qq-progress-bar-selector qq-progress-bar"></div>
                </div>
                <span class="qq-upload-spinner-selector qq-upload-spinner"></span>
                <img class="qq-thumbnail-selector" qq-max-size="100" qq-server-scale>
                <span class="qq-upload-file-selector qq-upload-file"></span>

                <span class="qq-edit-filename-icon-selector qq-edit-filename-icon" aria-label="Edit filename"></span>
                @*<input class="qq-edit-filename-selector qq-edit-filename" tabindex="0" type="text">*@
                @*<span class="qq-edit-filename-icon-selector qq-edit-filename-icon" aria-label="Edit filename"></span>
                    <input class="qq-edit-filename-selector qq-edit-filename" tabindex="0" type="text">*@
                <span class="qq-upload-size-selector qq-upload-size"></span>
                <button type="button" class="qq-btn qq-upload-cancel-selector qq-upload-cancel">Cancel</button>
                <button type="button" class="qq-btn qq-upload-retry-selector qq-upload-retry">Retry</button>
                <button type="button" class="qq-btn qq-upload-delete-selector qq-upload-delete">Delete</button>
                <span role="status" class="qq-upload-status-text-selector qq-upload-status-text"></span>
            </li>
        </ul>

        <dialog class="qq-alert-dialog-selector">
            <div class="qq-dialog-message-selector"></div>
            <div class="qq-dialog-buttons">
                <button type="button" class="qq-cancel-button-selector">Close</button>
            </div>
        </dialog>

        <dialog class="qq-confirm-dialog-selector">
            <div class="qq-dialog-message-selector"></div>
            <div class="qq-dialog-buttons">
                <button type="button" class="qq-cancel-button-selector">No</button>
                <button type="button" class="qq-ok-button-selector">Yes</button>
            </div>
        </dialog>

        <dialog class="qq-prompt-dialog-selector">
            <div class="qq-dialog-message-selector"></div>
            <input type="text">
            <div class="qq-dialog-buttons">
                <button type="button" class="qq-cancel-button-selector">Cancel</button>
                <button type="button" class="qq-ok-button-selector">Ok</button>
            </div>
        </dialog>
    </div>
</script>
<script>
    $(function () {
        $('#SupportDocForm').find(':submit').unbind();
        $('#SupportDocForm').find(':submit').click(function (e) {
            e.preventDefault();
            manualUploader.uploadStoredFiles();

        });
        $('#my-select-files-btn').click(function (e) {
            e.preventDefault();
            $('.qq-upload-button-selector').find(':input').click();
        });
    });

    var manualUploader = new qq.FineUploader({
        validation: {
            allowedExtensions: ['pdf', 'PDF','doc','docx','xlsx','xls'],
            itemLimit: 10,
        },

        element: document.getElementById('fine-uploader-manual-trigger'),
        template: 'qq-template-manual-trigger',
        request: {
            endpoint: '/PCA/PartnersCapacityAssessment/UploadFiles',
        },
        data: {
            '__RequestVerificationToken': $('#__RequestVerificationToken').val(),
        },
        thumbnails: {
            placeholders: {
                waitingPath: '/source/placeholders/waiting-generic.png',
                notAvailablePath: '/source/placeholders/not_available-generic.png'
            }
        },
        callbacks: {
            onAllComplete: function (succeeded, failed, jsonResult) {

                if (failed != undefined && failed.length > 0) {
                    Notify(NotificationType.Error, 'Error during uploading the files!');
                } else {
                    Notify(NotificationType.Success, 'Files uploaded successfully!');
                }
                console.log("succeeded", succeeded);
                console.log("failed", failed);
                console.log("jsonResult", jsonResult);
                //DataTableRefresh('PartnerReportCompiledsDataTable');
                //setTimeout(() => { location.reload(true); }, 1000);
                ChangeToLink($('#PartnersCapacityAssessmentDocTitleGUID').val());
                $('#FormModal').modal('hide');
                
            },
            onUpload: function (e) {
                var form = $('#SupportDocForm');
                var token = $('input[name="__RequestVerificationToken"]', form).val();
                this.setParams({
                    'PK': $('#PartnersCapacityAssessmentDocTitleGUID').val(),
                    'SupportDocTitle': $('#SupportDocTitle').val(),
                    '__RequestVerificationToken': token,
                });
            }
        },
        autoUpload: false,
        debug: true
    });
</script>

