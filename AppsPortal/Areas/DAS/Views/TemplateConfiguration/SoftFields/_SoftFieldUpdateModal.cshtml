@model TemplateTypeDocumentSoftFieldModel
@using (Html.BeginForm("TemplateTypeDocumentSoftField", "TemplateConfiguration", new { Area = "DAS" }, FormMethod.Post, new { id = "SoftFieldForm" }))
{
    string ModalTitle = Model.TemplateTypeDocumentSoftFieldGUID.ToString() == Guid.Empty.ToString() ? "New SoftField" : "Edit SoftField";
    @Html.Partial("_ModalHeader", ModalTitle)
<div class="modal-body">
    @Html.AntiForgeryToken()
    @Html.FormHiddenFields(model => model.TemplateTypeDocumentSoftFieldGUID)
    @Html.HiddenFor(model => model.TemplateTypeDocumentGUID)

    <div class="form-group">
        @Html.LabelFor(model => model.SoftFieldName)
        @Html.EditorFor(model => model.SoftFieldName, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.FieldTypeGUID)
        @Html.DropDownListFor(model => model.FieldTypeGUID, new DropDownList().DASSoftFieldType(), "", new { style = "width:100%", @class = "form-control select2-basic-search" })
    </div>
    @*<div class="form-group">
        @Html.LabelFor(model => model.Description)

        @Html.CheckBoxFor(model => model.IsMandatury, new { htmlAttributes = new { @class = "form-control" } })
    </div>*@

    <div class="form-group">
        @Html.LabelFor(model => model.IsMandatury)

        @Html.CheckBoxFor(model => model.IsMandatury, new { htmlAttributes = new { @class = "form-control" } })
    </div>
    @*<div class="form-group">
            @Html.LabelFor(model => model.EmailAddress)
            @Html.EditorFor(model => model.EmailAddress, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.FullName)
            @Html.EditorFor(model => model.FullName, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
        </div>*@
</div>
    <div class="modal-footer form-footer">
        @if (Model.TemplateTypeDocumentSoftFieldGUID==null || Model.TemplateTypeDocumentSoftFieldGUID == Guid.Empty)
        {
            @Html.CreateButton(Permissions.DASConfiguration.Create, Apps.DAS)
        }
        else
        {
            if (Model.Active)
            {
                @Html.UpdateButton(Permissions.DASConfiguration.Update, Apps.DAS)
                @Html.DeleteSwitchButton(Permissions.DASConfiguration.Delete, Apps.DAS)
            }
            else
            {
                @Html.RestoreSwitchButton(Permissions.DASConfiguration.Delete, Apps.DAS)
            }
        }
        @Html.CloseModalButton()
    </div>
}
