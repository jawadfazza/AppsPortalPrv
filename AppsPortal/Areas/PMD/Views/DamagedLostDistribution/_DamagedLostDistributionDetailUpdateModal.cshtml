@model dataPMDDamagedLostDistributionDetail
@using (Html.BeginForm("DamagedLostDistributionDetail", "DamagedLostDistribution", new { Area = "PMD" }, FormMethod.Post, new { id = "DamagedLostDistributionDetailForm" }))
{
    string ModalTitle = Model.DamagedLostDistributionDetailGUID.ToString() == Guid.Empty.ToString() ? "New DamagedLostDistributionDetail" : "Edit DamagedLostDistributionDetail";
    @Html.Partial("_ModalHeader", ModalTitle)
    <div class="modal-body">
        @Html.AntiForgeryToken()
        @Html.FormHiddenFields(model => model.DamagedLostDistributionDetailGUID)
        @Html.HiddenFor(model => model.DamagedLostDistributionGUID)
        <div class="form-group">
            @Html.LabelFor(model => model.UnitOfAchievementGUID)
            @Html.DropDownListFor(model => model.UnitOfAchievementGUID, new DropDownList().PMD2023Units(), "", new { @class = "form-control select2-basic-search", style = "width:100%" })
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Quantity)
            @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
        </div>
    </div>
    <div class="modal-footer form-footer">
        @if (Model.DamagedLostDistributionDetailGUID == Guid.Empty)
        {
            @Html.CreateButton(Permissions.PMDDamagedLostDistribution.Create, Apps.PMD)
        }
        else
        {
            if (Model.Active)
            {
                @Html.UpdateButton(Permissions.PMDDamagedLostDistribution.Update, Apps.PMD)
                @Html.DeleteSwitchButton(Permissions.PMDDamagedLostDistribution.Delete, Apps.PMD)
            }
            else
            {
                @Html.RestoreSwitchButton(Permissions.PMDDamagedLostDistribution.Delete, Apps.PMD)
            }
        }
        @Html.CloseModalButton()
    </div>
}
