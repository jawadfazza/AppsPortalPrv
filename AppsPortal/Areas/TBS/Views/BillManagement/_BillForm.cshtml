@model DataBillUpdateModel
@using (Html.BeginForm("Bill", "BillManagement", new { Area = "TBS" }, FormMethod.Post, new { id = "BillForm", @class = "main-form", enctype = "multipart/form-data" }))
{
    <h3>@resxPages.Details</h3>
    @Html.AntiForgeryToken()
    @Html.FormHiddenFields(model => model.BillGUID)
    <div class="row">
        <div class="col-lg-7 col-md-5 col-sm-8 col-xs-12">

            <div class="form-group">
                @Html.LabelFor(model => model.TelecomCompanyOperationConfigGUID)
                @Html.DropDownListFor(model => model.TelecomCompanyOperationConfigGUID, new DropDownList().TelecomCompaniesConfigGuidForMobilesList(), "", new { @class = "form-control select2-basic-single", style = "width:100%" })
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.BillForTypeGUID)
                @Html.DropDownListFor(model => model.BillForTypeGUID, new DropDownList().BillTypes(1), "", new { @class = "form-control select2-basic-single", style = "width:100%" })
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.BillForMonth)
                @Html.DropDownListFor(model => model.BillForMonth, new DropDownList().BillingMonthesForReport(), "", new { @class = "form-control select2-basic-single", style = "width:100%" })
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.BillForYear)
                @Html.DropDownListFor(model => model.BillForYear, new DropDownList().BillingYearsForReport(), "", new { @class = "form-control select2-basic-single", style = "width:100%" })
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.DutyStationGUID)
                @Html.DropDownListFor(model => model.DutyStationGUID, new DropDownList().DutyStations(Guid.Parse("E156C022-EC72-4A5A-BE09-163BD85C68EF")), "", new { @class = "form-control select2-basic-single", style = "width:100%" })
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.BillDeadLine)
                @Html.EditorFor(model => model.BillDeadLine, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.ProcessingMethod)
                @Html.DropDownListFor(model => model.ProcessingMethod, new DropDownList().BillProcessingMethod(), "", new { @class = "form-control select2-basic-single", style = "width:100%" })
            </div>
            <div class="form-group">
                <input id="file1" type="file" multiple name="fileUpload" />
            </div>
            <div class="row">
                <div class="col-md-12">
                    <div class="progress">
                        <div id="div-progres-bar" class="progress-bar" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width:0%">
                            <span id="span-progres-bar" style="float:right;padding-right:1px;">0%</span>
                        </div>

                    </div>
                </div>
            </div>

            <div id="BillFormControl" class="form-group form-footer">
                @if (Model.BillGUID == Guid.Empty)
                {
                    <button id="btn-create-bill" class="btn btn-primary"><i style="display:none;" class="fas fa-spinner fa-1x fa-pulse"></i> <span class="this-btn-text"> Create Bill</span></button>
                }
                else
                {
                    if (Model.Active)
                    {
                        @Html.UpdateButton(Permissions.TelecomCompanies.Update, Apps.TBS)
                        @Html.CreateNewButton(Permissions.TelecomCompanies.Create, Apps.TBS, Url.Action("TelecomCompany/Create", "Configuration", new { Area = "TBS" }))
                        @Html.DeleteButton(Permissions.TelecomCompanies.Delete, Apps.TBS)
                    }
                    else
                    {
                        @Html.RestoreButton(Permissions.TelecomCompanies.Restore, Apps.TBS)
                    }
                }
                @Html.BackToList(Url.Action("Bills", "BillManagement", new { Area = "TBS" }))
            </div>
        </div>
    </div>
}
<script type="text/javascript">
    $(function () {

        $('input.form-control', '#BillForm').attr('data-placement', 'auto top');
        $('input.form-control', '#BillForm').attr('data-container', '#PopOverContainer');
        //Parse form after return with error by ajax call
        $.validator.unobtrusive.parse($('#BillForm'));

        $('#BillFormControl').find(':submit').attr('onclick', 'javascript:void(0)');

        $('#btn-create-bill').click(function (e) {
            e.preventDefault();
            var formName = 'BillForm';
            $('#' + formName).valid();
            var form = $('#' + formName);
            var error = $('.input-validation-error', '#' + formName).length;

            if (error > 0) {
                $('.select2-selection__rendered').removeAttr('style');

                $('.input-validation-error:first-child').parent().popover({
                    trigger: 'click',
                    placement: 'auto top',
                    container: '#PopOverContainer',
                    content: ''
                });
                return;
            }

            var btn = $(this);
            $(btn).find('.fas').show();
            $(btn).find('.this-btn-text').html('Please Wait');
            $(btn).attr("disabled", true);
            var ajaxURL = $('#BillForm').attr('action') + 'Create';

            let myForm = document.getElementById('BillForm');
            let formData = new FormData(myForm);
            $.ajax({
                url: ajaxURL,
                type: 'POST',
                data: formData,
                cache: false,
                contentType: false,
                processData: false,
                success: function (JsonResult) {
                    console.log('JsonResult', JsonResult);
                    if (JsonResult.TotalRecords == undefined) {
                        form.replaceWith(JsonResult);
                        $(btn).find('.fas').show();
                        $(btn).find('.this-btn-text').html('Please Wait');
                        $(btn).attr("disabled", true);
                        InitPlugins('#' + formName);
                    } else {
                        console.log('JsonResult.createBillTaskID', JsonResult.createBillTaskID);
                        console.log('JsonResult.TotalRecords', JsonResult.TotalRecords);
                        StartProcessBar(JsonResult.createBillTaskID, JsonResult.TotalRecords);
                    }

                },
                error: function (jqXHR, textStatus, errorThrown) {
                    //do your own thing
                    alert("fail");
                }
            });
        });

        //$('#file1').change(function (e) {
        //    e.preventDefault();
        //    alert("ASD");
        //    console.log(this);
        //    var formData = new FormData();
        //    formData.append('file', $(this)[0].files[0]);
        //    $.ajax({
        //        url: '/TBS/BillManagement/CheckBilllFile',
        //        type: 'POST',
        //        data: formData,
        //        processData: false,  // tell jQuery not to process the data
        //        contentType: false,  // tell jQuery not to set contentType
        //        success: function (data) {
        //            console.log(data);
        //            alert(data);
        //        }
        //    });
        //});
    });

    function StartProcessBar(createBillTaskID, totalRecords) {
        var btn = $('#btn-create-bill');
        var intervalId = setInterval(function () {
            $.post("/TBS/BillManagement/BillCreateProgres", { id: createBillTaskID }, function (progress) {
                console.log('progress', progress);

                if (percentage == 100) {
                    Notify(NotificationType.Success, 'Please wait.');
                }
                else if (progress > 0) {
                    var percentage = Math.round(((progress * 1) / (totalRecords * 1)) * 100);
                    console.log('percentage', percentage);
                    $('#div-progres-bar').css('width', percentage + "%");
                    $('#span-progres-bar').text('Uploading: ' + percentage + "%");
                }
                else if (progress < 0) {
                    $('#div-progres-bar').css('width', "100%");
                    $('#span-progres-bar').text("100%");
                    $(btn).find('.fas').hide();
                    $(btn).find('.this-btn-text').html(' Create Bill');
                    clearInterval(intervalId);
                    if ($('#ProcessingMethod').val() == 'A') {
                        Notify(NotificationType.Success, 'Bill Created Successfully. Starting Billing Process Now.');
                        $('#div-progres-bar').css('width', "0%");
                        $('#span-progres-bar').text("0%");
                        AutomaticBillProcess();
                    } else {
                        Notify(NotificationType.Success, 'Bill Created Successfully. Please Process The Bill Manually');
                    }
                }
            });
        }, 500);
    };

    function AutomaticBillProcess() {
        var notified = 0;
        var form = $('#BillForm');
        var formData = new FormData(form.get(0));
        formData.append('TelecomCompanyOperationConfigGUID', $('#TelecomCompanyOperationConfigGUID').val());
        formData.append('DutyStationGUID', $('#DutyStationGUID').val());
        console.log('formData', formData);
        $.post('ProcessCalculationCreate', $(form).serialize(), function (JsonResult) {
            console.log('JsonResult', JsonResult);
            // Periodically update progres bar
            var intervalId = setInterval(function () {
                $.post("/TBS/BillManagement/ProcessCalculationProgres", { id: JsonResult.processCalculationTaskId }, function (progress) {
                    console.log('progress', progress - 1);
                    var percentage = Math.round(((progress * 1) / (JsonResult.TotalRecords * 1)) * 100);
                    if (percentage == 100) {
                        if (notified != 1) {
                            $('#div-progres-bar').css('width', "100%");
                            $('#span-progres-bar').text("100%");
                            $('.span-process-status').text('Completed');
                            $('.span-process-status').removeClass('label-warning');
                            $('.span-process-status').addClass('label-success');
                            $('.span-process-icon').hide();
                            Notify(NotificationType.Success, 'Process completed. Generating notifications e-mails, please wait...');
                            notified = 1;
                        }
                    }
                    else if (progress > 0) {
                        console.log('percentage', percentage);
                        $('#div-progres-bar').css('width', percentage + "%");
                        $('#span-progres-bar').text('Processing: ' + percentage + "%");
                    }
                    else if (progress < 0) {
                        clearInterval(intervalId);
                        $('.span-process-status').text('Completed');
                        $('.span-process-status').removeClass('label-danger').removeClass('label-warning');
                        $('.span-process-status').addClass('label-success');
                        $('.span-process-icon').hide();
                        Notify(NotificationType.Success, 'E-mails generated successfully.');
                    }
                });
            }, 500);
        });

    }
</script>
