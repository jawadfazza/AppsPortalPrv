@model SetupOrganizationModel
@{
    ViewBag.Title = "SetupOrganization";
    Layout = "~/Views/Shared/Layouts/_SiteLayout.cshtml";
}
<div class="page--header">
    <div class="page--banner">
        @if ((bool)ViewBag.IsUNHCR)
        {
            @*UNHCR*@
            <h2>@resxPages.SetupOrganizationUnhcrH2</h2>
            <article>
               @resxPages.SetupOrganizationUnhcrAtricle
            </article>
        }
        else
        {
            @*Partners*@
            <h2>@resxPages.SetupOrganizationPartnerH2</h2>
            <article>
              @resxPages.SetupOrganizationPartnerArticle
            </article>
        }
    </div>
</div>


<div class="page--content">
    <div class="wizard">
        <span class="done">@resxPages.RegistrationStep1</span>
        <span class="done">@resxPages.RegistrationStep2</span>
        <span class="done">@resxPages.RegistrationStep3</span>
        <span>@resxPages.RegistrationStep4</span>
        <span>@resxPages.RegistrationStep5</span>
    </div>
    <div class="page--body">
        @using (Html.BeginForm("SetupOrganization", "Registration", FormMethod.Post, new { id = "SetupOrganizationForm", @class = "main-form" }))
        {
            @Html.AntiForgeryToken()
            @*@Html.Partial("_ErrorSummary")*@
            <div class="row">
                <div class="col-lg-5 col-md-5 col-sm-6 col-xs-12">
                    @if ((bool)ViewBag.IsUNHCR)
                    {
                        <div class="form-group HANDLER">
                            @Html.LabelFor(model => model.OrganizationGUID)
                            @Html.DropDownListFor(model => model.OrganizationGUID, new List<SelectListItem> { new SelectListItem { Text = UNHCR.FullName, Value = UNHCR.GUID.ToString(), Selected = true } }, new { @class = "form-control select2-basic-single", style = "width:100%" })
                        </div>
                        <div class="form-group HANDLER">
                            @Html.LabelFor(model => model.OrganizationInstanceGUID, htmlAttributes: new { @class = "control-label" })
                            @Html.DropDownListFor(model => model.OrganizationInstanceGUID, new DropDownList().OrganizationsInstancesByOrganization(UNHCR.GUID),"", new { @class = "form-control select2-basic-search", style = "width:100%" })
                        </div>
                    }
                    else
                    {
                        <div class="form-group">
                            @Html.LabelFor(model => model.OrganizationGUID, htmlAttributes: new { @class = "control-label" })
                            @Html.DropDownListFor(model => model.OrganizationGUID, new DropDownList().Organizations(), new
                       {
                           style = "width:100%",
                           @class = "form-control select2-basic-search",
                            onchange = "UpdateDropDownList([$(this).val()], [{ DropDownListID : 'OrganizationInstanceGUID', Action : 'RemoteOrganizationsInstancesByOrganization'}]);"
                       })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.OrganizationInstanceGUID, htmlAttributes: new { @class = "control-label" })
                            @Html.DropDownListFor(model => model.OrganizationInstanceGUID, new DropDownList().Empty(), "", new
                       {
                           style = "width:100%",
                           @class = "form-control select2-basic-search"
                       })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.SponsorUserProfileGUID, htmlAttributes: new { @class = "control-label" })
                            @Html.DropDownListFor(model => model.SponsorUserProfileGUID, new DropDownList().Empty(), new
                       {
                           style = "width:100%",
                           @class = "form-control select2-basic-ajax FlashOnEmptySelect2",
                           data_action = "RemoteFindUserCurrentProfile"
                       })
                        </div>
                    }
                    <div class="form-group HANDLER">
                        @Html.LabelFor(model => model.JobTitleGUID, htmlAttributes: new { @class = "control-label" })
                        @Html.DropDownListFor(model => model.JobTitleGUID, new DropDownList().JobTitles(), "", new { @class = "form-control select2-basic-search" })
                    </div>
                    <div class="row">
                        <div class="col-lg-6 col-xs-12">
                            <div class="form-group">
                                @Html.LabelFor(model => model.FromDate, htmlAttributes: new { @class = "control-label" })
                                @Html.EditorFor(model => model.FromDate)
                            </div>
                        </div>
                        <div class="col-lg-6 col-xs-12">
                            <div class="form-group">
                                @Html.LabelFor(model => model.ToDate, htmlAttributes: new { @class = "control-label" })
                                @Html.EditorFor(model => model.ToDate)
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <input type="submit"  value="@resxUIControls.Continue" class="btn btn-success" />
                    </div>
                </div>
            </div>
        }
    </div>
</div>
<script>
    $(document).ready(function () {
        //$('.select2-basic-ajax').select2({
        //    ajax: {
        //        url: "/Registration/OrganizationSearch/",
        //        dataType: 'json',
        //        delay: 250,
        //        data: function (params) {
        //            return {
        //                pk: params.term, // search term
        //                page: params.page
        //            };
        //        },
        //        processResults: function (data, params) {
        //            // parse the results into the format expected by Select2
        //            // since we are using custom formatting functions we do not need to
        //            // alter the remote JSON data, except to indicate that infinite
        //            // scrolling can be used
        //            params.page = params.page || 1;
        //            return {
        //                results: data.items,
        //                pagination: {
        //                    more: (params.page * 30) < data.total_count
        //                }
        //            };
        //        },
        //        cache: true
        //    },
        //    escapeMarkup: function (markup) { return markup; }, // let our custom formatter work
        //    minimumInputLength: 1,
        //    templateResult: formatRepo, // omitted for brevity, see the source of this page
        //    templateSelection: formatRepoSelection // omitted for brevity, see the source of this page
        //});
        //function formatRepo(repo) {
        //    if (repo.loading) return repo.text;
        //    var markup = "<div>" + repo.OrganizationDescription + "</div>";
        //    return markup;
        //}
        //function formatRepoSelection(repo) {
        //    return repo.full_name || repo.text;
        //}
    });
    $('#SetupOrganizationForm').submit(function () {
        $('#SetupOrganizationForm').valid();
        var error = $('.input-validation-error').length;
        if (error > 0) {
            $('.select2-selection__rendered').removeAttr('style');
            $('.input-validation-error:first-child').parent().popover({
                trigger: 'focus',
                placement: 'auto top',
                container: '#PopOverContainer',
                content: ''
            });
            return;
        }
        return true; 
    });
</script>