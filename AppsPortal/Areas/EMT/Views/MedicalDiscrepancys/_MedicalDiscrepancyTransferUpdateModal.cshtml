@model MedicalDiscrepancyUpdateModel
@using (Html.BeginForm("DistributeBulkItems", "MedicalDiscrepancys", new { Area = "EMT" }, FormMethod.Post, new { id = "MedicalDiscrepancyBulkForm" }))
{
    string ModalTitle = Model.MedicalDiscrepancyGUID.ToString() == Guid.Empty.ToString() ? "New Distributions" : "";
    @Html.Partial("_ModalHeader", ModalTitle)
    <div class="modal-body">
        @Html.AntiForgeryToken()
        @Html.FormHiddenFields(model => model.MedicalDiscrepancyGUID)
        @Html.HiddenFor(model => model.MedicalPharmacyGUID)
        <div class="form-group">
            @Html.LabelFor(model => model.DiscrepancyDate)
            @Html.EditorFor(model => model.DiscrepancyDate, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
        </div>
        <div class="form-group HANDLER">
            @Html.LabelFor(model => model.MedicalPharmacyGUID)
            @Html.DropDownListFor(model => model.MedicalPharmacyGUID, new DropDownList().MedicalPharmacyAll(), "", new { style = "width:100%", @class = "form-control select2-basic-search" ,disabled="disabled"})
        </div>
        <div class="form-group HANDLER">
            @Html.LabelFor(model => model.DiscrepancyType)
            @Html.DropDownListFor(model => model.DiscrepancyType, new DropDownList().DiscrepancyType(), "", new
            {
           style = "width:100%",
           @class = "form-control select2-basic-search"
           })
        </div>
        @*<div class="form-group">
            @Html.LabelFor(model => model.ConfirmedBy):
            @Html.DisplayFor(model => model.ConfirmedBy, new { htmlAttributes = new { @class = "form-control" } })-
            @Html.LabelFor(model => model.ConfirmedOn):
            @Html.DisplayFor(model => model.ConfirmedOn, new { htmlAttributes = new { @class = "form-control" } })
        </div>*@
        <hr />
        <div class="row">

            <div class="col-sm-5"> @Html.Label(resxDbFields.BrandName) </div>
            <div class="col-sm-3"> @Html.Label(resxDbFields.DiscrepancyQuantity) </div>
            <div class="col-sm-2"> @Html.Label(resxDbFields.OriginalQuantity) </div>
            <div class="col-sm-2"> @Html.Label(resxDbFields.RemainingItems) </div>
        </div>
        <hr />
        <div class="mScroll blueDataTableHeader" data-mcs-theme="rounded-dark" style="max-height:200px;">
            @for (var i = 0; i < Model.MedicalDiscrepancyDetails.Count; i++)
            {
            <div class="row">
                @Html.HiddenFor(model => model.MedicalDiscrepancyDetails[i].DiscrepancyQuantity)
                @Html.HiddenFor(model => model.MedicalDiscrepancyDetails[i].RemainingQuaintity)
                @Html.HiddenFor(model => model.MedicalDiscrepancyDetails[i].OriginalQuantity)
                @Html.HiddenFor(model => model.MedicalDiscrepancyDetails[i].BrandName)
                @Html.HiddenFor(model => model.MedicalDiscrepancyDetails[i].MedicalItemGUID)
                @Html.HiddenFor(model => model.MedicalDiscrepancyDetails[i].ReferenceItemGUID)
                @Html.HiddenFor(model => model.MedicalDiscrepancyDetails[i].Comment)

                <div class="col-sm-5 center-block"> @Html.DisplayFor(model => model.MedicalDiscrepancyDetails[i].BrandName) </div>
                <div class="col-sm-3 center-block"> @Html.DisplayFor(model => model.MedicalDiscrepancyDetails[i].DiscrepancyQuantity) </div>
                <div class="col-sm-2 center-block">@Html.DisplayFor(model => model.MedicalDiscrepancyDetails[i].OriginalQuantity) </div>
                <div class="col-sm-2 center-block">@Html.DisplayFor(model => model.MedicalDiscrepancyDetails[i].RemainingQuaintity) </div>
            </div>
                <hr />
            }
        </div>
    </div>
    <div class="modal-footer form-footer">
        @Html.CreateButton(Permissions.MedicalItemInput.Create, Apps.EMT)
        @Html.CloseModalButton()
    </div>
}

<script>
    $('#MedicalBeneficiaryGUID').select2({
        minimumInputLength: 2,
        ajax: {
            url: function () {
                return '/DropDownList/RemoteFindBeneficiaryBy'
            },
            delay: 250,
            data: function (params) {
                var query = {
                    SearchKey: params.term
                }
                // Query parameters will be ?search=[term]&type=public
                return query;
            },
            processResults: function (data) {
                var res = data.items.map(function (item) {
                    return { id: item.id, text: item.Text };
                });
                return {
                    results: res
                };
            }
        }
    });

    function GetBeneficiaryDetails(ID, Container) {
        $.ajax({
            url: '/MedicalBeneficiarys/GetBeneficiaryDetails/',
            data: { ID: ID },
            type: 'GET',
            success: function (Result) {
                var data = Result["Result"];
                $('.lblFullName', Container).text("Refugee Full Name: " + data.RefugeeFullName);
                $('.lblNationality', Container).text("Nationality: " + data.NationalityCode);
                $('.lblBrithday', Container).text("Brithday: " + moment(data.Brithday).format('LL'));

            }
        });
    }


</script>


