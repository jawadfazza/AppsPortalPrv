@model ItemRequestDetailUpdateModel


@using (Html.BeginForm("WarehouseItemRequestDetail", "ItemRequests", new { Area = "WMS" }, FormMethod.Post, new { id = "ItemRequestDetailForm" }))
{
    string ModalTitle = Model.ItemRequestDetailGUID.ToString() == Guid.Empty.ToString() ? "New Item" : "Edit Item";
    @Html.Partial("_ModalHeader", ModalTitle)
    <div class="modal-body">
        @Html.AntiForgeryToken()
        @Html.FormHiddenFields(model => model.ItemRequestDetailGUID)
        @Html.HiddenFor(model => model.ItemRequestGUID)

        <div class="form-group HANDLER">
            @Html.LabelFor(model => model.WarehouseItemGUID)
            @Html.DropDownListFor(model => model.WarehouseItemGUID, new DropDownList().WarehouseItems(), "", new { @class = "form-control select2-basic-single", style = "width:100%" })


        </div>
    
        <div class="form-group">
            @Html.LabelFor(model => model.QuantityOrdered)
            @Html.EditorFor(model => model.QuantityOrdered, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Comments)
            @Html.EditorFor(model => model.Comments, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
        </div>
       
        
        
    </div>
    <div class="modal-footer form-footer">
        @if (Model.ItemRequestDetailGUID == Guid.Empty)
        {
            @Html.CreateButton(Permissions.WarehouseItemsRelease.Create, Apps.WMS)
        }
        else
        {
            if (Model.Active)
            {
                @Html.UpdateButton(Permissions.WarehouseItemsRelease.Update, Apps.WMS)
                @Html.DeleteSwitchButton(Permissions.WarehouseItemsRelease.Delete, Apps.WMS)
            }
            else
            {
                @Html.RestoreSwitchButton(Permissions.WarehouseItemsRelease.Delete, Apps.WMS)
            }
        }
        @Html.CloseModalButton()
    </div>
}
