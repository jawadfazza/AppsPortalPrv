@model WarehouseModelDamageMovementsUpdateModel

<style>
    #trigger-upload {
        color: white;
        background-color: #00ABC7;
        font-size: 14px;
        padding: 7px 20px;
        background-image: none;
    }

    #fine-uploader-manual-trigger .qq-upload-button {
        margin-right: 15px;
    }

    #fine-uploader-manual-trigger .buttons {
        width: 36%;
    }

    #fine-uploader-manual-trigger .qq-uploader .qq-total-progress-bar-container {
        width: 60%;
    }
</style>

@using (Html.BeginForm("WarehouseModelDamagedMovements", "ModelMovements", new { Area = "WMS" }, FormMethod.Post, new { id = "WarehouseModelDamagedMovementsForm" }))
{
    string ModalTitle = Model.ItemOutputDetailDamagedTrackGUID.ToString() == Guid.Empty.ToString() ? "New Report" : "Edit Report";
    @Html.Partial("_ModalHeader", ModalTitle)
    <div class="modal-body">
        @Html.AntiForgeryToken()
        @Html.FormHiddenFields(model => model.ItemOutputDetailDamagedTrackGUID)
        @Html.HiddenFor(model => model.ItemInputDetailGUID)

        <div class="form-group HANDLER">
            @Html.LabelFor(model => model.DamagedTypeGUID)
            @Html.DropDownListFor(model => model.DamagedTypeGUID, new DropDownList().WarehouseModelDamagedTypes(), "", new { @class = "form-control select2-basic-single", style = "width:100%" })
        </div>

        <div class="form-group HANDLER">
            @Html.LabelFor(model => model.DamagedByGUID)
            @Html.DropDownListFor(model => model.DamagedByGUID, new DropDownList().WarehouseRequsterTypes(), "", new
            {
                @class = "form-control select2-basic-single",
                style = "width:100%",
                onchange = "UpdateDropDownList([$(this).val()], [{ DropDownListID : 'DamagedByNameGUID', Action : 'RemoteWarehouseRequestTypes'}]);"
            })


        </div>


        <div class="form-group HANDLER">
            @Html.LabelFor(model => model.DamagedByNameGUID)
            @Html.DropDownListFor(model => model.DamagedByNameGUID, new DropDownList().Empty(), "", new { style = "width:100%", @class = "form-control select2-basic-search" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LocationGUID)
            @Html.DropDownListFor(model => model.LocationGUID, new DropDownList().Governorates(Guid.Parse("699287E8-754D-4A63-B8DD-5344CFBAFD22")), "", new { @class = "form-control select2-basic-single", style = "width:100%" })
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.DocumentReference)
            @Html.EditorFor(model => model.DocumentReference, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DamagedDate)
            @Html.EditorFor(model => model.DamagedDate, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IncidentLocationOccureed)
            @Html.EditorFor(model => model.IncidentLocationOccureed, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PresentLocation)
            @Html.EditorFor(model => model.PresentLocation, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DamagedReason)
            @Html.EditorFor(model => model.DamagedReason, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.Comments)
            @Html.EditorFor(model => model.Comments, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
        </div>

        <div class="row">
            <div class="col-xs-12">
                <div id="fine-uploader-manual-trigger"></div>
            </div>
        </div>



    </div>
    <div class="modal-footer form-footer">
        <input id="my-select-files-btn" type="button" value="Select Files" class="btn btn-default" />
        @if (Model.ItemOutputDetailDamagedTrackGUID == Guid.Empty)
    {
        @Html.CreateButton(Permissions.WarehouseItemsRelease.Create, Apps.WMS)
}
else
{
    if (Model.Active)
    {
        @Html.UpdateButton(Permissions.WarehouseItemsRelease.Update, Apps.WMS)
        @Html.DeleteSwitchButton(Permissions.WarehouseItemsRelease.Delete, Apps.WMS)
}
else
{
    @Html.RestoreSwitchButton(Permissions.WarehouseItemsRelease.Delete, Apps.WMS)
}
}
        @Html.CloseModalButton()
    </div>
}

<script type="text/template" id="qq-template-manual-trigger">
    <div class="qq-uploader-selector qq-uploader" qq-drop-area-text="Drop files here">
        <div class="qq-total-progress-bar-container-selector qq-total-progress-bar-container">
            <div role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" class="qq-total-progress-bar-selector qq-progress-bar qq-total-progress-bar"></div>
        </div>
        <div class="qq-upload-drop-area-selector qq-upload-drop-area" qq-hide-dropzone>
            <span class="qq-upload-drop-area-text-selector"></span>
        </div>
        <div class="buttons">
            <div class="qq-upload-button-selector qq-upload-button hidden">
                <div id="btn-upload-files">Select files</div>
            </div>
            <button type="button" id="trigger-upload" class="btn btn-primary hidden">
                <i class="icon-upload icon-white"></i> Upload
            </button>
        </div>
        <span class="qq-drop-processing-selector qq-drop-processing">
            <span>Processing dropped files...</span>
            <span class="qq-drop-processing-spinner-selector qq-drop-processing-spinner"></span>
        </span>
        <ul class="qq-upload-list-selector qq-upload-list" aria-live="polite" aria-relevant="additions removals">
            <li>
                <div class="qq-progress-bar-container-selector">
                    <div role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" class="qq-progress-bar-selector qq-progress-bar"></div>
                </div>
                <span class="qq-upload-spinner-selector qq-upload-spinner"></span>
                <img class="qq-thumbnail-selector" qq-max-size="100" qq-server-scale>
                <span class="qq-upload-file-selector qq-upload-file"></span>
     
                <span class="qq-edit-filename-icon-selector qq-edit-filename-icon" aria-label="Edit filename"></span>
                @*<input class="qq-edit-filename-selector qq-edit-filename" tabindex="0" type="text">*@
                @*<span class="qq-edit-filename-icon-selector qq-edit-filename-icon" aria-label="Edit filename"></span>
                    <input class="qq-edit-filename-selector qq-edit-filename" tabindex="0" type="text">*@
                <span class="qq-upload-size-selector qq-upload-size"></span>
                <button type="button" class="qq-btn qq-upload-cancel-selector qq-upload-cancel">Cancel</button>
                <button type="button" class="qq-btn qq-upload-retry-selector qq-upload-retry">Retry</button>
                <button type="button" class="qq-btn qq-upload-delete-selector qq-upload-delete">Delete</button>
                <span role="status" class="qq-upload-status-text-selector qq-upload-status-text"></span>
            </li>
        </ul>

        <dialog class="qq-alert-dialog-selector">
            <div class="qq-dialog-message-selector"></div>
            <div class="qq-dialog-buttons">
                <button type="button" class="qq-cancel-button-selector">Close</button>
            </div>
        </dialog>

        <dialog class="qq-confirm-dialog-selector">
            <div class="qq-dialog-message-selector"></div>
            <div class="qq-dialog-buttons">
                <button type="button" class="qq-cancel-button-selector">No</button>
                <button type="button" class="qq-ok-button-selector">Yes</button>
            </div>
        </dialog>

        <dialog class="qq-prompt-dialog-selector">
            <div class="qq-dialog-message-selector"></div>
            <input type="text">
            <div class="qq-dialog-buttons">
                <button type="button" class="qq-cancel-button-selector">Cancel</button>
                <button type="button" class="qq-ok-button-selector">Ok</button>
            </div>
        </dialog>
    </div>
</script>
<script>
    $(function () {
        $('#WarehouseModelDamagedMovementsForm').find(':submit').unbind();
        $('#WarehouseModelDamagedMovementsForm').find(':submit').click(function (e) {
            e.preventDefault();
            manualUploader.uploadStoredFiles();

        });
        $('#my-select-files-btn').click(function (e) {
            e.preventDefault();
            $('.qq-upload-button-selector').find(':input').click();
        });
    });

    var manualUploader = new qq.FineUploader({
        validation: {
            allowedExtensions: ['pdf', 'xls', 'xlsx', 'doc', 'docx'],
        },
        element: document.getElementById('fine-uploader-manual-trigger'),
        template: 'qq-template-manual-trigger',
        request: {
            endpoint: '/WMS/ModelMovements/WarehouseModelDamagedMovementsUpload',
        },
        thumbnails: {
            placeholders: {
                waitingPath: '/source/placeholders/waiting-generic.png',
                notAvailablePath: '/source/placeholders/not_available-generic.png'
            }
        },
        callbacks: {
            onAllComplete: function (succeeded, failed,jsonResult) {

                if (failed != undefined && failed.length > 0) {
                    Notify(NotificationType.Error, 'Error during uploading the files!');
                } else {
                    Notify(NotificationType.Success, 'Files uploaded successfully!');
                }
                console.log("succeeded", succeeded);
                console.log("failed", failed);
                console.log("jsonResult", jsonResult);


                DataTableRefresh('WarehouseModelDamagedMovementDataTable');
            },
            onUpload: function (e) {
              
                this.setParams({
                    'ItemOutputDetailDamagedTrackGUID': $('#ItemOutputDetailDamagedTrackGUID').val(),
                    'ItemInputDetailGUID': $('#ItemInputDetailGUID').val(),
                    'DamagedTypeGUID': $('#DamagedTypeGUID').val(),
                    'DamagedByGUID': $('#DamagedByGUID').val(),
                    'DamagedByNameGUID': $('#DamagedByNameGUID').val(),
                    'DocumentReference': $('#DocumentReference').val(),
                    'DamagedDate': $('#DamagedDate').val(),
                    'IncidentLocationOccureed': $('#IncidentLocationOccureed').val(),
                    'PresentLocation': $('#PresentLocation').val(),
                    'DamagedReason': $('#DamagedReason').val(),
                    'Comments': $('#Comments').val(),
                });
            }
        },
        autoUpload: false,
        debug: true
    });
</script>

