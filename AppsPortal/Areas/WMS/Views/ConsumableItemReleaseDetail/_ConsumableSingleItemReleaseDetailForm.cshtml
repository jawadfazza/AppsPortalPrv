
@model ConsumableSingleReleaseModelDetailUpdateModel

@using (Html.BeginForm("ConsumableSingleItemReleaseDetail", "ConsumableItem", new { Area = "WMS" }, FormMethod.Post, new { id = "WarehouseConsumableItemDetailRelease", @class = "main-form" }))
{
    string ModalTitle = Model.ItemOutputDetailGUID.ToString() == Guid.Empty.ToString() ? "New Release item" : "Edit Release";
    @Html.Partial("_ModalHeader", ModalTitle)
<div class="modal-body">
    @Html.AntiForgeryToken()
    @Html.FormHiddenFields(model => model.ItemOutputDetailGUID)
    @Html.HiddenFor(model => model.ItemModelWarehouseGUID)



    @if (Model.ItemOutputDetailGUID == null || Model.ItemOutputDetailGUID == Guid.Empty)
    {
        <div class="form-group HANDLER">
            @Html.LabelFor(model => model.RequesterGUID)
            @Html.DropDownListFor(model => model.RequesterGUID, new DropDownList().WarehouseConsumableRequsterTypes(), "", new
            {
                @class = "form-control select2-basic-search",
                style = "width:100%",
                onchange = "UpdateDropDownList([$(this).val()], [{ DropDownListID : 'RequesterNameGUID', Action : 'RemoteConsumableWarehouseRequestTypes'}]);"
            })


        </div>
        <div class="form-group HANDLER">
            @Html.LabelFor(model => model.RequesterNameGUID)
            @Html.DropDownListFor(model => model.RequesterNameGUID, new DropDownList().Empty(), "", new { style = "width:100%", @class = "form-control select2-basic-search" })
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.WarehouseLocationGUID)
            @Html.DropDownListFor(model => model.WarehouseLocationGUID, new DropDownList().WarehouseLocation(), "", new { @class = "form-control select2-basic-search", style = "width:100%" })
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.RequestedQunatity)
            @Html.EditorFor(model => model.RequestedQunatity, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ExpectedStartDate)
            @Html.EditorFor(model => model.ExpectedStartDate, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.Comments)
            @Html.EditorFor(model => model.Comments, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
        </div>




    }






</div>
    <div class="modal-footer form-footer">
        @if (Model.ItemOutputDetailGUID ==null || Model.ItemOutputDetailGUID == Guid.Empty)
        {
            @Html.CreateButton(Permissions.WarehouseItemsRelease.Create, Apps.WMS)
        }
        else
        {
            if (Model.Active)
            {
                @Html.UpdateButton(Permissions.WarehouseItemsRelease.Update, Apps.WMS)
                @Html.DeleteSwitchButton(Permissions.WarehouseItemsRelease.Delete, Apps.WMS)
            }
            else
            {
                @Html.RestoreSwitchButton(Permissions.WarehouseItemsRelease.Delete, Apps.WMS)
            }
        }
        @Html.CloseModalButton()
    </div>


}
