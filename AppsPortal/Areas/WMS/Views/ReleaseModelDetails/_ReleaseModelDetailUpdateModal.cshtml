@model ReleaseModelDetailUpdateModel


@using (Html.BeginForm("ReleaseSingleItem", "ReleaseModels", new { Area = "WMS" }, FormMethod.Post, new { id = "ReleaseModelDetailForm" }))
{
    string ModalTitle = Model.ItemOutputDetailGUID.ToString() == Guid.Empty.ToString() ? "New Model" : "Edit Model";
    @Html.Partial("_ModalHeader", ModalTitle)
    <div class="modal-body">
        @Html.AntiForgeryToken()
        @Html.FormHiddenFields(model => model.ItemOutputDetailGUID)
        @Html.HiddenFor(model => model.ItemOutputGUID)

        <div class="form-group HANDLER">
            @Html.LabelFor(model => model.ModelDescription)
            @Html.DropDownListFor(model => model.ItemOutputGUID, new DropDownList().WarehouseModels(), "", new
       {
           @class = "form-control select2-basic-single",
           style = "width:100%",
           onchange = "UpdateDropDownList([$(this).val()], [{ DropDownListID : 'ItemInputDetailGUID', Action : 'RemoteModelDeterminant'}]);"
       })


        </div>
        <div class="form-group">    
            @Html.LabelFor(model => model.BarcodeNumber)
            @Html.DropDownListFor(model => model.ItemInputDetailGUID, new DropDownList().Empty(), "", new { @class = "form-control select2-basic-single", style = "width:100%" })
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.ItemRequestTypeGUID)
            @Html.DropDownListFor(model => model.ItemRequestTypeGUID, new DropDownList().WarehouseReleaseTypes(), "", new { @class = "form-control select2-basic-single", style = "width:100%" })
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.ExpectedStartDate)
            @Html.EditorFor(model => model.ExpectedStartDate, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.ExpectedReturenedDate)
            @Html.EditorFor(model => model.ExpectedReturenedDate, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.ActualReturenedDate)
            @Html.EditorFor(model => model.ActualReturenedDate, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
        </div>
     
            <div class="form-group">
                @Html.LabelFor(model => model.RequestedQunatity)
                @Html.EditorFor(model => model.RequestedQunatity, new { htmlAttributes = new { @class = "form-control", autocomplete = "off",@Default=1 } })
            </div>
        
        
    </div>
    <div class="modal-footer form-footer">
        @if (Model.ItemOutputDetailGUID == Guid.Empty)
        {
            @Html.CreateButton(Permissions.WarehouseItemsRelease.Create, Apps.WMS)
        }
        else
        {
            if (Model.Active)
            {
                @Html.UpdateButton(Permissions.WarehouseItemsRelease.Update, Apps.WMS)
                @Html.DeleteSwitchButton(Permissions.WarehouseItemsRelease.Delete, Apps.WMS)
            }
            else
            {
                @Html.RestoreSwitchButton(Permissions.WarehouseItemsRelease.Delete, Apps.WMS)
            }
        }
        @Html.CloseModalButton()
    </div>
}
