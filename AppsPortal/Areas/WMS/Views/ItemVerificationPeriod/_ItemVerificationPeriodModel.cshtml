@model WarehouseItemVerficationPeriodModel
@using (Html.BeginForm("WarehouseItemVerificationPeriod", "ModelMovements", new { Area = "WMS" }, FormMethod.Post, new { id = "verificationModelDetailForm" }))
{
    string ModalTitle = Model.ItemVerificationPeriodGUID.ToString() == Guid.Empty.ToString() ? "New verification period" : "Edit verification period";
    @Html.Partial("_ModalHeader", ModalTitle)
<div class="modal-body">
    @Html.AntiForgeryToken()
    @Html.FormHiddenFields(model => model.ItemVerificationPeriodGUID)

    <div class="form-group">
        @Html.LabelFor(model => model.VerificationStartDate)
        @Html.EditorFor(model => model.VerificationStartDate, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.VerificationEndDate)
        @Html.EditorFor(model => model.VerificationEndDate, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
    </div>
  

    @*<div class="form-group">
            @Html.LabelFor(model => model.RequestedQunatity)
            @Html.EditorFor(model => model.RequestedQunatity, new { htmlAttributes = new { @class = "form-control", autocomplete = "off",@Default=1 } })
        </div>*@


</div>
<div class="modal-footer form-footer">
    @if (Model.ItemVerificationPeriodGUID == Guid.Empty || Model.ItemVerificationPeriodGUID==null)
    {
    @Html.CreateButton(Permissions.WarehouseItemsRelease.Create, Apps.WMS)
    }
    else
    {
    if (Model.Active)
    {
    @Html.UpdateButton(Permissions.WarehouseItemsRelease.Update, Apps.WMS)
        
    @Html.DeleteSwitchButton(Permissions.WarehouseItemsRelease.Delete, Apps.WMS)
    }
    else
    {
    @Html.RestoreSwitchButton(Permissions.WarehouseItemsRelease.Delete, Apps.WMS)
    }
    }
    @Html.CloseModalButton()
</div>
}
