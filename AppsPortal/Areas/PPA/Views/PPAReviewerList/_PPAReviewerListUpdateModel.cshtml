@model PPAReviewerListUpdateModel
@using (Html.BeginForm("PPAReviewerList", "Management", new { Area = "PPA" }, FormMethod.Post, new { id = "PPAReviewerListForm" }))
{
    string ModalTitle = Model.PPAReviewerListGUID.ToString() == Guid.Empty.ToString() ? "New Reviewer List" : "Edit Reviewer List";
    @Html.Partial("_ModalHeader", ModalTitle)
    <div class="modal-body">
        @Html.AntiForgeryToken()
        @Html.FormHiddenFields(model => model.PPAReviewerListGUID)
        @Html.HiddenFor(model => model.PPAGUID)
        <div class="form-group HANDLER">
            @Html.LabelFor(model => model.DutyStationGUID)
            @Html.DropDownListFor(model => model.DutyStationGUID, new DropDownList().DutyStations(Guid.Parse("E156C022-EC72-4A5A-BE09-163BD85C68EF")), "", new
       {
           style = "width:100%",
           @class = "form-control select2-basic-single"
       })
        </div>
        <div class="form-group HANDLER">
            @Html.LabelFor(model => model.DepartmentGUID)
            @Html.DropDownListFor(model => model.DepartmentGUID, new DropDownList().Departments(Guid.Parse("E156C022-EC72-4A5A-BE09-163BD85C68EF")), "", new
       {
           style = "width:100%",
           @class = "form-control select2-basic-single",
           onchange = "LoadDepartmentFocalPoints($(this).val());"
       })
        </div>

        <span>Added Staff</span>
        <div id="DepartmentFocalPoints" class="form-group">


        </div>
        <div class="form-group">
            @Html.DropDownListFor(model => model.SelectedUsers, new DropDownList().Empty(), "", new
       {
           multiple = "multiple",
           style = "width:100%",
           @class = "form-control select2-basic-multiple"
       })
        </div>
        <hr />
        <span>CC List</span>
        <div class="form-group">

            @Html.DropDownList("CCUsers", new DropDownList().Empty(), new
       {
           multiple = "multiple"
                               style = "width:100%",
           @class = "form-control select2-basic-ajax ",
           data_action = "RemoteFindUserCurrentGUID"
       })

        </div>
    </div>
    <div class="modal-footer form-footer">
        @if (Model.PPAReviewerListGUID == Guid.Empty)
        {
            @Html.CreateButton(Permissions.PPAManagement.Create, Apps.PPA)
        }
        else
        {
            if (Model.Active)
            {
                @Html.UpdateButton(Permissions.PPAManagement.Update, Apps.PPA)
                @Html.DeleteSwitchButton(Permissions.PPAManagement.Delete, Apps.PPA)
            }
            else
            {
                @Html.RestoreSwitchButton(Permissions.PPAManagement.Delete, Apps.PPA)
            }
        }
        @Html.CloseModalButton()
    </div>
}
<script>
    $('.select2-basic-ajax').select2({
        minimumInputLength: 3,
        multiple: true,
        ajax: {
            url: function () { return '/DropDownList/' + $(this).attr('data-action') },
            delay: 250,
            data: function (params) {
                var query = {
                    SearchKey: params.term
                }
                // Query parameters will be ?search=[term]&type=public
                return query;
            },
            processResults: function (data) {
                // Tranforms the top-level key of the response object from 'items' to 'results'
                return {
                    results: data.items

                };
            }
        }
    });


    //$(document).unbind('ifChecked ifUnchecked', '.chkNode-accordion');
    //$(document).on('ifChecked ifUnchecked', '.chkNode-accordion', function (event) {
    //    var childrenElem = $(this).closest('.configOption').children();

    //    console.log($(childrenElem).eq(0).val());
    //    console.log($(childrenElem).eq(1).val());
    //    var ID = $(childrenElem).eq(0).val();
    //    var Text = $(childrenElem).eq(1).val();

    //    console.log(ID);
    //    console.log(Text);

    //    var data = {
    //        id: ID,
    //        text: Text
    //    };
    //    if (event.type == 'ifChecked') {
    //        var newOption = new Option(data.text, data.id, true, true);
    //        $('#SelectedUsers').append(newOption).trigger('change');
    //    } else {

    //        $('#SelectedUsers option[value=' + ID + ']').remove().trigger('change');
    //    }

    //});
    function LoadDepartmentFocalPoints(DepartmentGUID) {
        $('#DepartmentFocalPoints').load("/PPA/Management/GetDepartmentsFocalPoints?DepartmentGUID=" + DepartmentGUID, function () {
            InitPlugins("#DepFocalPointsDiv");
            var selectedUsers = $("#SelectedUsers").val();
            $.each(selectedUsers, function (index, value) {
                $('#' + value).prop("checked", true).parent('div').addClass('checked');
            });
            $('#PPAReviewerListForm').find(':submit').prop('disabled', false);

        })
    };
</script>
