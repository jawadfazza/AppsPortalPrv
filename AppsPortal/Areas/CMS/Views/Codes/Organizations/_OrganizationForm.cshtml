@model OrganizationUpdateModel
@using (Html.BeginForm("Organization", "Codes", new { Area = "CMS" }, FormMethod.Post, new { id = "OrganizationForm", @class = "main-form" }))
{
    <h3>@resxPages.Details</h3>
    @Html.AntiForgeryToken()
    @Html.FormHiddenFields(model => model.OrganizationGUID)
    <div class="row">
        <div class="col-lg-8">
            <div class="form-group">
                <label>Organization Logo</label><br />
                <div class="PhotoBox">
                    @Html.HiddenFor(model => model.MediaName)
                    <img id="imgLogo" class="imgLogo" src="@Model.MediaPath" />
                    <div id="LogoUploadList" class="LoadingList">
                    </div>
                </div>
                <div id="fine-uploader" class="upload-link">
                </div>
                &nbsp;|&nbsp;
                <div style="display:inline-block; padding:8px 0;">
                    <a href="#" class="Confirm" data-mode="Single" data-submittype="OrganizationLogoDelete" data-url="/Codes/Photo/">Remove</a>
                </div>
            </div>
        </div>
        </div>
        <div class="row">
        <div class="col-lg-8 col-nopadding">
            <div class="col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.OrganizationFocusCode)
                    @Html.EditorFor(model => model.OrganizationFocusCode, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.OrganizationShortName)
                    @Html.EditorFor(model => model.OrganizationShortName, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.OrganizationDescription)
                    @Html.EditorFor(model => model.OrganizationDescription, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.OrganizationTypeGUID)
                    @Html.DropDownListFor(model => model.OrganizationTypeGUID, new DropDownList().OrganizationTypes(), "", new
           {
               @class = "form-control select2-basic-single",
               style = "width:100%",
               @onchange = "ShowOtherFields(this,['" + OrganizationsTypes.International + "'],'country')"
           })
                </div>
                @{string ControlStatus = "hidden";
                if (Model.OrganizationTypeGUID != OrganizationsTypes.International && Model.OrganizationTypeGUID != null)
                {
                    ControlStatus = "";
                }
                <div class="form-group country @ControlStatus">
                    @Html.LabelFor(model => model.CountryGUID)
                    @Html.DropDownListFor(model => model.CountryGUID, new DropDownList().Countries(), "", new { @class = "form-control select2-basic-search", style = "width:100%" })
                </div>
                }
            </div>
            <div class="col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.DirectorName)
                    @Html.EditorFor(model => model.DirectorName, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.DirectorEmail)
                    @Html.EditorFor(model => model.DirectorEmail, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.DirectorPhone)
                    @Html.EditorFor(model => model.DirectorPhone, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.OrganizationWebSite)
                    @Html.EditorFor(model => model.OrganizationWebSite, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.HQAddress)
                    @Html.TextAreaFor(model => model.HQAddress, new { @class = "form-control group-control", autocomplete = "off", style = "width:100%;", rows = 1 })
                </div>
            </div>
            <div class="col-lg-12">
                <div id="OrganizationFormControls" class="form-group form-footer">
                    @if (Model.OrganizationGUID == Guid.Empty)
                {
                        @Html.CreateButton(Permissions.Organizations.Create, Apps.CMS)
                    }
                    else
                    {
                        if (Model.Active)
                        {
                            @Html.UpdateButton(Permissions.Organizations.Update, Apps.CMS)
                            @Html.CreateNewButton(Permissions.Organizations.Create, Apps.CMS, Url.Action("Organizations/Create", "Codes", new { Area = "CMS" } ))
                            @Html.DeleteButton(Permissions.Organizations.Delete, Apps.CMS)
                        }
                        else
                        {
                            @Html.RestoreButton(Permissions.Organizations.Restore, Apps.CMS)
                        }
                    }
                    @Html.BackToList(Url.Action("Organizations", "Codes", new { Area = "CMS" } ))
                </div>
            </div>
        </div>
    </div>
}
<script type="text/template" id="qq-template">
    <div class="qq-uploader-selector qq-uploader-link">
        <div class="qq-upload-button-selector qq-upload-button">
            <div>Change Logo</div>
        </div>
        <ul class="qq-upload-list-selector qq-upload-list" aria-live="polite" aria-relevant="additions removals">
            <li style="margin:10px auto;">
                <div class="qq-progress-bar-container-selector">
                    <div role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" class="qq-progress-bar-selector qq-progress-bar"></div>
                </div>
                <span class="qq-upload-spinner-selector qq-upload-spinner"></span>
                <span class="qq-edit-filename-icon-selector qq-edit-filename-icon" aria-label="Edit filename"></span>
                <span class="qq-upload-size-selector qq-upload-size"></span>
                <button type="button" class="qq-upload-cancel-selector btn btn-default">Cancel</button>
                <button type="button" class="qq-upload-retry-selector btn btn-danger">Retry</button>
                <span role="status" class="qq-upload-status-text-selector qq-upload-status-text"></span>
            </li>
        </ul>
    </div>
</script>
<script>
    var uploader = new qq.FineUploader({
        validation: {
            allowedExtensions: ['png'],
            image: { minWidth: 300, minHeight: 300 },
        },
        showMessage: function (message) {
            Notify(NotificationType.Error, message);
        },
        messages: {
            typeError: "{file} has an invalid extension.<br>Only {extensions} images are allowed.",
            minHeightImageError: "Logo quality is low<br>Minimum resolution is 300 Pixels Highet or Width",
            minWidthImageError: "Logo quality is low<br>Minimum resolution is 300 Pixels Highet or Width",
        },
        debug: false,
        element: document.getElementById('fine-uploader'),
        listElement: document.getElementById('LogoUploadList'),
        request: {
            endpoint: '/Upload/UploadOrganizationLogo/' + $('#OrganizationGUID').val()
        },
        deleteFile: {
            enabled: true,
            endpoint: '/uploads'
        },
        retry: {
            enableAuto: true
        },
        callbacks: {
            onUpload: function () {
                console.log("Upload started!");
                $('#LogoUploadList').show();
            },
            onComplete: function (id, name, responseJSON, maybeXhr) {
                $('.qq-upload-size-selector').hide();
                $('#imgLogo').attr('src', responseJSON.path + "?" + Math.random().toString());
                $('#MediaName').val(responseJSON.path);
                console.log("Upload Completed!");
                $('.qq-upload-success').remove();
                Notify(NotificationType.Success, "Logo uploaded successfully.");
            }
        }
    });
</script>
