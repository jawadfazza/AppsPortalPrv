@model ContactInfoUpdateModel
@using (Html.BeginForm("ContactInfo", "ContactInfos", new { Area = "AMS" }, FormMethod.Post, new { id = "ContactInfoForm"}))
{
   
    string ModalTitle = Model.ContactInfoGUID.ToString() == Guid.Empty.ToString() ? "New Contact Info" : "Edit Contact nfo";
    @Html.Partial("_ModalHeader", ModalTitle)
    
    <div class="modal-body">
        @Html.AntiForgeryToken()
        @Html.FormHiddenFields(model => model.ContactInfoGUID)
        @Html.HiddenFor(model => model.CaseGUID)
        <div class="form-group">
            @Html.LabelFor(model => model.PhoneNumber)
            @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.PhoneType)
            @Html.DropDownListFor(model => model.PhoneType, new DropDownList().LookupValues(LookupTables.PhoneType), "", new { style = "width:100%", @class = "form-control select2-basic-search" })
        </div>
        </div>
        <div class="modal-footer form-footer">
            @if (Model.ContactInfoGUID == Guid.Empty)
            {
                @Html.CreateButton(Permissions.ContactInfo.Create, Apps.AMS)
            }
            else
            {
                if (Model.Active)
                {
                    @Html.UpdateButton(Permissions.ContactInfo.Update, Apps.AMS)
                    @Html.DeleteSwitchButton(Permissions.ContactInfo.Delete, Apps.AMS)
                }
                else
                {
                    @Html.RestoreSwitchButton(Permissions.ContactInfo.Delete, Apps.AMS)
                }
            }
            @Html.CloseModalButton()
        </div>

}
