@model ItemOutputDetailFlowModel
<style>
    .wrapper {
        position: relative;
        width: 400px;
        height: 200px;
        -moz-user-select: none;
        -webkit-user-select: none;
        -ms-user-select: none;
        user-select: none;
    }

    img {
        position: absolute;
        left: 0;
        top: 0;
    }

    .signature-pad {
        position: absolute;
        left: 0;
        top: 0;
        width: 400px;
        height: 200px;
    }
</style>

@using (Html.BeginForm("WarehosueReleaseModelFlow", "ModelMovements", new { Area = "WMS" }, FormMethod.Post, new { id = "ReleaseModelFlowForm" }))
{
    string ModalTitle = Model.ItemOutputDetailGUID.ToString() == Guid.Empty.ToString() ? " Return item to stock" : "Return item to stock ";
    @Html.Partial("_ModalHeader", ModalTitle)
    <div class="modal-body">
        @Html.AntiForgeryToken()
        @Html.FormHiddenFields(model => model.ItemOutputDetailFlowGUID)
        @Html.HiddenFor(model => model.ItemOutputDetailGUID)

            <div class="form-group">
            @Html.LabelFor(model => model.CreatedDate)
            @Html.EditorFor(model => model.CreatedDate, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.WarehouseLocationGUID)
            @Html.DropDownListFor(model => model.WarehouseLocationGUID, new DropDownList().WarehouseLocation(), "", new { @class = "form-control select2-basic-single", style = "width:100%" })
        </div>
 
        <div class="form-group">
            @Html.LabelFor(model => model.Comments)
            @Html.EditorFor(model => model.Comments, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
        </div>
        @*<div class="form-group">
            <div class="wrapper">
                <img src="~/Assets/Images/blankImage.png" width=400 height=200 />

                <canvas id="signature-pad" class="signature-pad" width=400 height=200></canvas>
            </div>
            <div>
            </div>
        </div>
        <button id="save">Save</button>
        <button id="clear">Clear</button>*@

    </div>
    <div class="modal-footer form-footer">
        @if (Model.ItemOutputDetailFlowGUID == Guid.Empty)
        {
            @Html.CreateButton(Permissions.WarehouseItemsRelease.Create, Apps.WMS)
        }
        else
        {
            if (Model.Active)
            {
                @Html.UpdateButton(Permissions.WarehouseItemsRelease.Update, Apps.WMS)
                @Html.DeleteSwitchButton(Permissions.WarehouseItemsRelease.Delete, Apps.WMS)
            }
            else
            {
                @Html.RestoreSwitchButton(Permissions.WarehouseItemsRelease.Delete, Apps.WMS)
            }
        }
        @Html.CloseModalButton()
    </div>
}


<script src="~/Assets/Plugin/SignaturePad/signature_pad.min.js"></script>
<script>
    var signaturePad = new SignaturePad(document.getElementById('signature-pad'), {
        backgroundColor: 'rgba(255, 255, 255, 0)',
        penColor: 'rgb(0, 0, 0)'
    });
    var saveButton = document.getElementById('save');
    var cancelButton = document.getElementById('clear');

    saveButton.addEventListener('click', function (event) {
        var data = signaturePad.toDataURL('image/png');
        alert(data);
        // Send data to server instead...
        window.open(data);
    });

    cancelButton.addEventListener('click', function (event) {
        signaturePad.clear();
    });
</script>