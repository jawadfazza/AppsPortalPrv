@model dataArchiveTemplateDocumentLink
@using (Html.BeginForm("DocumentLink", "DocumentLinkS", new { Area = "DAS" }, FormMethod.Post, new { id = "TagForm" }))
{
    string ModalTitle = Model.ScannDocumentLinkGUID.ToString() == Guid.Empty.ToString() ? "New Link" : "Edit Link";
    @Html.Partial("_ModalHeader", ModalTitle)
<div class="modal-body">
    @Html.AntiForgeryToken()
    @Html.FormHiddenFields(model => model.ScannDocumentLinkGUID)
    @Html.HiddenFor(model => model.ScannDocumentGUID)

    <div class="form-group HANDLER">
        @Html.LabelFor(model => model.ScannDocumentLinkedWithGUID)
        @Html.DropDownListFor(model => model.ScannDocumentLinkedWithGUID, new DropDownList().Empty(), "", new
   {
       style = "width:100%",
       @class = "form-control select2-basic-ajax FlashOnEmptySelect2",
       data_action = "RemoteFindFileNumberBy",
   })
    </div>

    <div class="form-group HANDLER">
        @Html.LabelFor(model => model.Comment)
        @Html.EditorFor(model => model.Comment, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
    </div>
</div>
    <div class="modal-footer form-footer">
        @if (Model.ScannDocumentLinkGUID == Guid.Empty)
        {
            @Html.CreateButton(Permissions.RefugeeScannedDocument.Create, Apps.DAS)
        }
        else
        {
            if (Model.Active)
            {
                @Html.UpdateButton(Permissions.RefugeeScannedDocument.Update, Apps.DAS)
                @Html.DeleteSwitchButton(Permissions.RefugeeScannedDocument.Delete, Apps.DAS)
            }
            else
            {
                @Html.RestoreSwitchButton(Permissions.RefugeeScannedDocument.Delete, Apps.DAS)
            }
        }
        @Html.CloseModalButton()
    </div>
}

<script>
    $('#ScannDocumentLinkedWithGUID').select2({
        minimumInputLength: 3,
        ajax: {
            url: function () {
                return '/DropDownList/RemoteFindFileNumberBy'
            },
            delay: 250,
            data: function (params) {
                var query = {
                    SearchKey: params.term
                }
                // Query parameters will be ?search=[term]&type=public
                return query;
            },
            processResults: function (data) {
                var res = data.items.map(function (item) {
                    return { id: item.id, text: item.text };
                });
                return {
                    results: res
                };
            }
        }
    });

    
</script>
