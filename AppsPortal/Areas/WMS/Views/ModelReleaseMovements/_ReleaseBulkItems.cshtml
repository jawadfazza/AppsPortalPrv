@model ReleaseBulkItemUpdateModalUpdateModel


@using (Html.BeginForm("WarehouseReleaseBulkItem", "ModelMovements", new { Area = "WMS" }, FormMethod.Post, new { id = "WarehouseReleaseBulckItemForm" }))
{
    string ModalTitle = Model.ItemOutputDetailGUID.ToString() == Guid.Empty.ToString() ? "New Issue" : "Edit Issue";
    @Html.Partial("_ModalHeader", ModalTitle)
<div class="modal-body">
    @Html.AntiForgeryToken()
    @Html.FormHiddenFields(model => model.ItemOutputDetailGUID)
    @Html.HiddenFor(model => model.ItemOutputGUID)
    @Html.HiddenFor(model => model.ItemInputDetailGUID)
    <div class="form-group HANDLER">
        @Html.LabelFor(model => model.RequesterGUID)
        @Html.DropDownListFor(model => model.RequesterGUID, new DropDownList().WarehouseRequsterTypes(), "", new
        {
            @class = "form-control select2-basic-single",
            style = "width:100%",
            onchange = "UpdateDropDownList([$(this).val()], [{ DropDownListID : 'RequesterNameGUID', Action : 'RemoteWarehouseRequestTypes'}]);"
        })


    </div>


    @if (Model.ItemOutputDetailGUID != Guid.Empty)
    {
        @Html.LabelFor(model => model.RequesterNameGUID)
        @Html.DropDownListFor(model => model.RequesterNameGUID, new DropDownList().WarehouseModelRequester(Model.RequesterGUID), "", new { style = "width:100%", @class = "form-control select2-basic-search" })
    }
    else
    {
        @Html.LabelFor(model => model.RequesterNameGUID)
        @Html.DropDownListFor(model => model.RequesterNameGUID, new DropDownList().Empty(), "", new { style = "width:100%", @class = "form-control select2-basic-search" })
    }

    <div class="form-group">
        @Html.LabelFor(model => model.WarehouseLocationGUID)
        @Html.DropDownListFor(model => model.WarehouseLocationGUID, new DropDownList().WarehouseLocation(), "", new { @class = "form-control select2-basic-single", style = "width:100%" })
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.WarehouseSubLocationGUID)
        @Html.DropDownListFor(model => model.WarehouseSubLocationGUID, new DropDownList().WarehouseSubLocation(), "", new { @class = "form-control select2-basic-single", style = "width:100%" })
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ItemRequestTypeGUID)
        @Html.DropDownListFor(model => model.ItemRequestTypeGUID, new DropDownList().WarehouseReleaseTypes(), "", new { @class = "form-control select2-basic-single", style = "width:100%" })
    </div>


    <div class="form-group">
        @Html.LabelFor(model => model.ItemInputModelGuids)
        @Html.DropDownListFor(model => model.ItemInputModelGuids, new DropDownList().GetModelDeterminants(), "", new { @class = "form-control select2-basic-single", style = "width:100%", Multiple = true })
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.ExpectedStartDate)
        @Html.EditorFor(model => model.ExpectedStartDate, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.ExpectedReturenedDate)
        @Html.EditorFor(model => model.ExpectedReturenedDate, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.ActualReturenedDate)
        @Html.EditorFor(model => model.ActualReturenedDate, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.NotifyStaffByEmailGUID)
        @Html.DropDownListFor(model => model.NotifyStaffByEmailGUID, new DropDownList().WarehouseNotifyStaffByEmail(), "", new { @class = "form-control select2-basic-search", style = "width:100%" })
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Comments)
        @Html.EditorFor(model => model.Comments, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
    </div>

    @*<div class="form-group">
            @Html.LabelFor(model => model.RequestedQunatity)
            @Html.EditorFor(model => model.RequestedQunatity, new { htmlAttributes = new { @class = "form-control", autocomplete = "off",@Default=1 } })
        </div>*@


</div>
<div class="modal-footer form-footer">
    @if (Model.ItemOutputDetailGUID == Guid.Empty)
    {
    @Html.CreateButton(Permissions.WarehouseItemsRelease.Create, Apps.WMS)
    }
    else
    {
    if (Model.Active)
    {
    @Html.UpdateButton(Permissions.WarehouseItemsRelease.Update, Apps.WMS)
    @Html.DeleteSwitchButton(Permissions.WarehouseItemsRelease.Delete, Apps.WMS)
    }
    else
    {
    @Html.RestoreSwitchButton(Permissions.WarehouseItemsRelease.Delete, Apps.WMS)
    }
    }
    @Html.CloseModalButton()
</div>
}
