
@model ConsumableItemDetailModel
@using (Html.BeginForm("ConsumableItemEntryDetail", "ConsumableItem", new { Area = "WMS" }, FormMethod.Post, new { id = "WarehouseConsumableItemDetail", @class = "main-form" }))
{
    string ModalTitle = Model.ItemInputDetailGUID.ToString() == Guid.Empty.ToString() ? "New Entry item" : "Edit item";
    @Html.Partial("_ModalHeader", ModalTitle)
<div class="modal-body">
    @Html.AntiForgeryToken()
    @Html.FormHiddenFields(model => model.ItemInputDetailGUID)
    @Html.HiddenFor(model => model.ItemInputGUID)
    @if (Model.ItemInputDetailGUID == null || Model.ItemInputDetailGUID == Guid.Empty)
    {
    <div class="form-group HANDLER">
        @Html.LabelFor(model => model.UserWarhouseGUID)


        @Html.DropDownListFor(model => model.UserWarhouseGUID, new DropDownList().WarehouseUserWarehouses(), "", new
   {
       @class = "form-control select2-basic-search",
       style = "width:100%",
       onchange = "UpdateDropDownList([$(this).val()], [{ DropDownListID : 'ItemModelWarehouseGUID', Action : 'RemoteWarehouseConsumableModelsByWarehouse'}]);"
   })
    </div>
    <div class="form-group HANDLER">
        @Html.LabelFor(model => model.ItemModelWarehouseGUID)
        @Html.DropDownListFor(model => model.ItemModelWarehouseGUID, new DropDownList().Empty(), "", new { @class = "form-control select2-basic-search", style = "width:100%" })
    </div>
    }
    <div class="form-group HANDLER">
        @Html.LabelFor(model => model.Qunatity)
        @Html.EditorFor(model => model.Qunatity, new { htmlAttributes = new { @class = "form-control PageTitle", autocomplete = "off" } })
    </div>
</div>
    <div class="modal-footer form-footer">
        @if (Model.ItemInputDetailGUID == Guid.Empty)
        {
            @Html.CreateButton(Permissions.WarehouseItemsEntry.Create, Apps.WMS)
        }
        else
        {
            if (Model.Active)
            {
                @Html.UpdateButton(Permissions.WarehouseItemsEntry.Update, Apps.WMS)
                @Html.DeleteSwitchButton(Permissions.WarehouseItemsEntry.Delete, Apps.WMS)
            }
            else
            {
                @Html.RestoreSwitchButton(Permissions.WarehouseItemsEntry.Delete, Apps.WMS)
            }
        }
        @Html.CloseModalButton()
    </div>
}
