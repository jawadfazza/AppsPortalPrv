@model StaffCorePassportUpdateModel
@using (Html.BeginForm("StaffCorePassport", "StaffProfile", new { Area = "ORG" }, FormMethod.Post, new { id = "StaffCorePassportForm" }))
{
    string ModalTitle = Model.StaffCorePassportGUID.ToString() == Guid.Empty.ToString() ? "New Passport" : "Edit Passport";
    @Html.Partial("_ModalHeader", ModalTitle)
    <div class="modal-body">
        @Html.AntiForgeryToken()
        @Html.FormHiddenFields(model => model.StaffCorePassportGUID)
        @Html.HiddenFor(model => model.UserGUID)
    
        <div class="form-group">
            @Html.LabelFor(model => model.NationalPassportNumber)
            @Html.EditorFor(model => model.NationalPassportNumber, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.NationalPassportDateOfIssue)
            @Html.EditorFor(model => model.NationalPassportDateOfIssue, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.NationalPassportDateOfExpiry)
            @Html.EditorFor(model => model.NationalPassportDateOfExpiry, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
        </div>
  
    </div>
    <div class="modal-footer form-footer">
        @if (Model.StaffCorePassportGUID == Guid.Empty)
        {
            @Html.CreateButton(Permissions.StaffProfile.Create, Apps.ORG)
        }
        else
        {
            if (Model.Active)
            {
                @Html.UpdateButton(Permissions.StaffProfile.Update, Apps.ORG)
                @Html.DeleteSwitchButton(Permissions.StaffProfile.Delete, Apps.ORG)
            }
            else
            {
                @Html.RestoreSwitchButton(Permissions.StaffProfile.Delete, Apps.ORG)
            }
        }
        @Html.CloseModalButton()
    </div>
}
