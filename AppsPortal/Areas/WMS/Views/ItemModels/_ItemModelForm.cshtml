
@model ItemModelUpdateModel
@using (Html.BeginForm("ItemModel", "ItemModels", new { Area = "WMS" }, FormMethod.Post, new { id = "ItemModelForm", @class = "main-form", enctype = "multipart/form-data" }))
{
    <h3>@resxPages.Details</h3>
    @Html.AntiForgeryToken()

    @Html.FormHiddenFields(model => model.WarehouseItemModelGUID)
    <div class="row">
        <div class="col-lg-5 col-md-5 col-sm-8 col-xs-12">
            <div class="form-group HANDLER">
                @Html.DropDownListFor(model => model.WarehouseItemClassificationGUID, new DropDownList().ItemClassification(), "", new
                {
                    @class = "form-control select2-basic-search",
                    style = "width:100%",
                    onchange = "UpdateDropDownList([$(this).val()], [{ DropDownListID : 'WarehouseItemGUID', Action : 'RemoteWarehouseItems'}]);"
                })



            </div>
            @if (Model.WarehouseItemModelGUID != Guid.Empty && Model.IsEdit==true)
            {
                @Html.DropDownListFor(model => model.WarehouseItemGUID, new DropDownList().WarehouseItems((Guid)Model.WarehouseItemClassificationGUID), "", new
                {
                    @class = "form-control select2-basic-search",
                    style = "width:100%",

                })
            }
            else
            {
                <div class="form-group HANDLER">
                    @Html.LabelFor(model => model.WarehouseItemGUID)
                    @Html.DropDownListFor(model => model.WarehouseItemGUID, new DropDownList().Empty(), "", new { style = "width:100%", @class = "form-control select2-basic-search" })
                </div>
            }


            <div class="form-group">
                @Html.LabelFor(model => model.BrandGUID)
                @Html.DropDownListFor(model => model.BrandGUID, new DropDownList().Brands(), "", new { style = "width:100%", @class = "form-control select2-basic-search" })
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.ModelDescription)
                @Html.EditorFor(model => model.ModelDescription, new { htmlAttributes = new { @class = "form-control PageTitle", autocomplete = "off" } })
            </div>


            <div class="form-group HANDLER">
                @Html.LabelFor(model => model.ItemModelRelationTypeGUID)
                @Html.DropDownListFor(model => model.ItemModelRelationTypeGUID, new DropDownList().WarehouseItemRelationTypes(), "", new
                {
                    style = "width:100%",
                    @class = "form-control select2-basic-search",
                    //onchange = "CheckRelationType($(this).val())"

                })
            </div>



            <div class="form-group HANDLER" id="itemparenetId">
                @Html.LabelFor(model => model.ParentWarehouseItemModelGUID)
                @Html.DropDownListFor(model => model.ParentWarehouseItemModelGUID, new DropDownList().WarehouseItemKitModels(), "", new { style = "width:100%", @class = "form-control select2-basic-search" })
            </div>




            <div id="ItemModelFormControls" class="form-group form-footer">
                @if (Model.IsEdit==false)
                {
                    @Html.CreateButton(Permissions.ItemModel.Create, Apps.WMS)
                }
                else
                {
                    if (Model.Active)
                    {

                        @Html.UpdateButton(Permissions.ItemModel.Update, Apps.WMS)
                        @Html.CreateNewButton(Permissions.ItemModel.Create, Apps.WMS, Url.Action("/Create", new { Area = "WMS" }))
                        @Html.DeleteButton(Permissions.ItemModel.Delete, Apps.WMS)
                    }
                    else
                    {
                        @Html.RestoreButton(Permissions.ItemModel.Restore, Apps.WMS)
                    }
                }
                @Html.BackToList(Url.Action("Index", "ItemModels", new { Area = "WMS" }))
            </div>
        </div>
    </div>
}
@if (Model.WarehouseItemModelGUID != Guid.Empty )
{
    using (Html.BeginForm("ItemModelUploadImage", "ItemModels", new { Area = "WMS" }, FormMethod.Post, new { id = "ItemModelFormUploadImage", @class = "main-form", enctype = "multipart/form-data" }))
    {
        @Html.FormHiddenFields(model => model.WarehouseItemModelGUID)
        <div class="form-group">
            @Html.TextBoxFor(m => m.UploadModelImage, new { type = "file", @accept = "image/*" })
        </div>


        <input type="submit" value="Upload Item Image" />
        <br />
        <img src="/Uploads/WMS/ItemImages/@Model.ItemImage"
             style="width: 100px; height: 100px;"
             class="Modal-Link">
    }
}
    <script>
        //if ($("#ParentWarehouseItemGUID").val() == null || $("#ItemModelRelationTypeGUID").val().toString().toUpperCase() != "A40EC252-622E-4FF1-9EF4-E328C7A3CE18") {
        //    $("#itemparenetId").hide();
        //}
        //var CheckRelationType = function () {

        //        if ($("#ItemModelRelationTypeGUID").val().toString().toUpperCase() =="A40EC252-622E-4FF1-9EF4-E328C7A3CE18") {

        //            $("#itemparenetId").show();


        //        }

    </script>
