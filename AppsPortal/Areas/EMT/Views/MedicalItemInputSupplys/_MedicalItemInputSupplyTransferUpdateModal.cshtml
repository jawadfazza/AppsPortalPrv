@model MedicalItemInputUpdateModel
@using (Html.BeginForm("MedicalItemInputSupplyTransfer", "MedicalItemInputSupplys", new { Area = "EMT" }, FormMethod.Post, new { id = "MedicalItemInputSupplyDetailForm" }))
{
    string ModalTitle =  "Transfer Supply Contract Items to Partner Warehouses" ;
    @Html.Partial("_ModalHeader", ModalTitle)
<div class="modal-body">
    @Html.AntiForgeryToken()
    @Html.FormHiddenFields(model => model.MedicalItemInputGUID)
    @Html.Hidden("ProvidedByOrganizationInstanceGUID","E156C022-EC72-4A5A-BE09-163BD85C68EF")
    <div class="form-group">
        @Html.Label(resxDbFields.DispatchDate)
        @Html.EditorFor(model => model.DeliveryDate, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
    </div>

    <div class="form-group HANDLER">
        @Html.LabelFor(model => model.ProcuredByOrganizationInstanceGUID)
        @Html.DropDownListFor(model => model.ProcuredByOrganizationInstanceGUID, new DropDownList().OrganizationsInstancesAcronymByProfileAll(), "", new
   {
       style = "width:100%",
       @class = "form-control select2-basic-search",
       onchange = "UpdateDropDownList([$(this).val()], [{ DropDownListID : 'MedicalPharmacyGUID', Action : 'RemoteMedicalPharmacyByOrganizationInsatance'}]);"
   })
    </div>
    <div class="form-group HANDLER">
        @Html.Label(resxDbFields.WarehouseDescription)
        @Html.DropDownListFor(model => model.MedicalPharmacyGUID, new DropDownList().MedicalPharmacyMain(true), "", new { style = "width:100%", @class = "form-control select2-basic-search" })
    </div>
    <hr />
    <div class="row">

        <div class="col-sm-4"> @Html.Label(resxDbFields.BrandName) </div>
        <div class="col-sm-2">@Html.Label(resxDbFields.BatchNumber) </div>
        <div class="col-sm-3"> @Html.Label(resxDbFields.QuantityByPackingUnit) </div>
        <div class="col-sm-3"> @Html.Label(resxDbFields.SupplyRemainingItems) </div>
    </div>
    <hr />
    <div class="mScroll blueDataTableHeader" data-mcs-theme="rounded-dark" style="max-height:300px;">
        @if (Model.medicalItemInputSupplyDetailsDataTableModels != null)
        {
            for (var i = 0; i < Model.medicalItemInputSupplyDetailsDataTableModels.Count; i++)
            {
                <div class="row">
                    @Html.HiddenFor(model => model.medicalItemInputSupplyDetailsDataTableModels[i].MedicalItemInputSupplyDetailGUID)
                    @Html.HiddenFor(model => model.medicalItemInputSupplyDetailsDataTableModels[i].RemainingItems)
                    @Html.HiddenFor(model => model.medicalItemInputSupplyDetailsDataTableModels[i].BrandName)
                    @Html.HiddenFor(model => model.medicalItemInputSupplyDetailsDataTableModels[i].BatchNumber)
                    @Html.HiddenFor(model => model.medicalItemInputSupplyDetailsDataTableModels[i].MedicalItemGUID)
                    <div class="col-sm-4"> @Html.DisplayFor(model => model.medicalItemInputSupplyDetailsDataTableModels[i].BrandName) </div>
                    <div class="col-sm-2">@Html.DisplayFor(model => model.medicalItemInputSupplyDetailsDataTableModels[i].BatchNumber) </div>
                    <div class="col-sm-3"> @Html.EditorFor(model => model.medicalItemInputSupplyDetailsDataTableModels[i].QuantityByPackingUnit, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" }, @style = "width:50px;" }) </div>
                    <div class="col-sm-3">@Html.DisplayFor(model => model.medicalItemInputSupplyDetailsDataTableModels[i].RemainingItems) </div>
                </div>
                <hr />
            }
        }
    </div>
</div>
    <div class="modal-footer form-footer">

        @Html.CreateButton(Permissions.MedicalItemInput.Create, Apps.EMT)
        @Html.CloseModalButton()
    </div>
    }
