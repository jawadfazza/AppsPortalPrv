//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EMT_DAL.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class EMTEntities : DbContext
    {
        public EMTEntities()
            : base("name=EMTEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<dataMedicalItemTransfer> dataMedicalItemTransfer { get; set; }
        public virtual DbSet<codeMedicalManufacturer> codeMedicalManufacturer { get; set; }
        public virtual DbSet<codeMedicalPharmacy> codeMedicalPharmacy { get; set; }
        public virtual DbSet<codeMedicalPharmacyLanguage> codeMedicalPharmacyLanguage { get; set; }
        public virtual DbSet<codeOrganizationsInstances> codeOrganizationsInstances { get; set; }
        public virtual DbSet<codeOrganizationsLanguages> codeOrganizationsLanguages { get; set; }
        public virtual DbSet<codeOrganizationsInstancesLanguages> codeOrganizationsInstancesLanguages { get; set; }
        public virtual DbSet<codeMedicalManufacturerLanguage> codeMedicalManufacturerLanguage { get; set; }
        public virtual DbSet<codeMedicalGenericName> codeMedicalGenericName { get; set; }
        public virtual DbSet<codeMedicalGenericNameLanguage> codeMedicalGenericNameLanguage { get; set; }
        public virtual DbSet<codeOrganizations> codeOrganizations { get; set; }
        public virtual DbSet<codeTablesValues> codeTablesValues { get; set; }
        public virtual DbSet<dataMedicalItemInputSupplyDetail> dataMedicalItemInputSupplyDetail { get; set; }
        public virtual DbSet<dataVendorPerformanceForm> dataVendorPerformanceForm { get; set; }
        public virtual DbSet<dataMedicalItemInput> dataMedicalItemInput { get; set; }
        public virtual DbSet<dataItemQuantityThreshold> dataItemQuantityThreshold { get; set; }
        public virtual DbSet<dataMedicalBeneficiaryItemOutDetail> dataMedicalBeneficiaryItemOutDetail { get; set; }
        public virtual DbSet<codeCountriesLanguages> codeCountriesLanguages { get; set; }
        public virtual DbSet<codeCountries> codeCountries { get; set; }
        public virtual DbSet<dataMedicalDistributionRestriction> dataMedicalDistributionRestriction { get; set; }
        public virtual DbSet<dataMedicalBeneficiary> dataMedicalBeneficiary { get; set; }
        public virtual DbSet<dataMedicalBeneficiaryItemOut> dataMedicalBeneficiaryItemOut { get; set; }
        public virtual DbSet<dataMedicalItemInputSupply> dataMedicalItemInputSupply { get; set; }
        public virtual DbSet<dataMedicalItemInputDetail> dataMedicalItemInputDetail { get; set; }
        public virtual DbSet<dataMedicalItemTransferDetail> dataMedicalItemTransferDetail { get; set; }
        public virtual DbSet<dataMedicalDiscrepancyDetail> dataMedicalDiscrepancyDetail { get; set; }
        public virtual DbSet<codeMedicalItem> codeMedicalItem { get; set; }
        public virtual DbSet<codeTablesValuesLanguages> codeTablesValuesLanguages { get; set; }
        public virtual DbSet<dataMedicalDiscrepancy> dataMedicalDiscrepancy { get; set; }
    
        public virtual ObjectResult<RP_ConsumptionMedicineByBeneficiariesTypeHeatMap_Result> RP_ConsumptionMedicineByBeneficiariesTypeHeatMap(string medicalPharmacyGUID, string medicalItemGUID, string medicalPharmacologicalFormGUID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string medicalBeneficiaryGUID, string lAN)
        {
            var medicalPharmacyGUIDParameter = medicalPharmacyGUID != null ?
                new ObjectParameter("MedicalPharmacyGUID", medicalPharmacyGUID) :
                new ObjectParameter("MedicalPharmacyGUID", typeof(string));
    
            var medicalItemGUIDParameter = medicalItemGUID != null ?
                new ObjectParameter("MedicalItemGUID", medicalItemGUID) :
                new ObjectParameter("MedicalItemGUID", typeof(string));
    
            var medicalPharmacologicalFormGUIDParameter = medicalPharmacologicalFormGUID != null ?
                new ObjectParameter("MedicalPharmacologicalFormGUID", medicalPharmacologicalFormGUID) :
                new ObjectParameter("MedicalPharmacologicalFormGUID", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var medicalBeneficiaryGUIDParameter = medicalBeneficiaryGUID != null ?
                new ObjectParameter("MedicalBeneficiaryGUID", medicalBeneficiaryGUID) :
                new ObjectParameter("MedicalBeneficiaryGUID", typeof(string));
    
            var lANParameter = lAN != null ?
                new ObjectParameter("LAN", lAN) :
                new ObjectParameter("LAN", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RP_ConsumptionMedicineByBeneficiariesTypeHeatMap_Result>("RP_ConsumptionMedicineByBeneficiariesTypeHeatMap", medicalPharmacyGUIDParameter, medicalItemGUIDParameter, medicalPharmacologicalFormGUIDParameter, startDateParameter, endDateParameter, medicalBeneficiaryGUIDParameter, lANParameter);
        }
    
        public virtual ObjectResult<RP_DispatchedMedicine_Result> RP_DispatchedMedicine(string medicalPharmacyGUID, string medicalItemGUID, string medicalPharmacologicalFormGUID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string lAN)
        {
            var medicalPharmacyGUIDParameter = medicalPharmacyGUID != null ?
                new ObjectParameter("MedicalPharmacyGUID", medicalPharmacyGUID) :
                new ObjectParameter("MedicalPharmacyGUID", typeof(string));
    
            var medicalItemGUIDParameter = medicalItemGUID != null ?
                new ObjectParameter("MedicalItemGUID", medicalItemGUID) :
                new ObjectParameter("MedicalItemGUID", typeof(string));
    
            var medicalPharmacologicalFormGUIDParameter = medicalPharmacologicalFormGUID != null ?
                new ObjectParameter("MedicalPharmacologicalFormGUID", medicalPharmacologicalFormGUID) :
                new ObjectParameter("MedicalPharmacologicalFormGUID", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var lANParameter = lAN != null ?
                new ObjectParameter("LAN", lAN) :
                new ObjectParameter("LAN", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RP_DispatchedMedicine_Result>("RP_DispatchedMedicine", medicalPharmacyGUIDParameter, medicalItemGUIDParameter, medicalPharmacologicalFormGUIDParameter, startDateParameter, endDateParameter, lANParameter);
        }
    
        public virtual ObjectResult<RP_PrescriptionsDispensed_Result> RP_PrescriptionsDispensed(string medicalPharmacyGUID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string lAN)
        {
            var medicalPharmacyGUIDParameter = medicalPharmacyGUID != null ?
                new ObjectParameter("MedicalPharmacyGUID", medicalPharmacyGUID) :
                new ObjectParameter("MedicalPharmacyGUID", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var lANParameter = lAN != null ?
                new ObjectParameter("LAN", lAN) :
                new ObjectParameter("LAN", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RP_PrescriptionsDispensed_Result>("RP_PrescriptionsDispensed", medicalPharmacyGUIDParameter, startDateParameter, endDateParameter, lANParameter);
        }
    
        public virtual ObjectResult<RP_TransferMedicine_Result> RP_TransferMedicine(string medicalPharmacyGUID, string medicalItemGUID, string medicalPharmacologicalFormGUID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string lAN)
        {
            var medicalPharmacyGUIDParameter = medicalPharmacyGUID != null ?
                new ObjectParameter("MedicalPharmacyGUID", medicalPharmacyGUID) :
                new ObjectParameter("MedicalPharmacyGUID", typeof(string));
    
            var medicalItemGUIDParameter = medicalItemGUID != null ?
                new ObjectParameter("MedicalItemGUID", medicalItemGUID) :
                new ObjectParameter("MedicalItemGUID", typeof(string));
    
            var medicalPharmacologicalFormGUIDParameter = medicalPharmacologicalFormGUID != null ?
                new ObjectParameter("MedicalPharmacologicalFormGUID", medicalPharmacologicalFormGUID) :
                new ObjectParameter("MedicalPharmacologicalFormGUID", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var lANParameter = lAN != null ?
                new ObjectParameter("LAN", lAN) :
                new ObjectParameter("LAN", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RP_TransferMedicine_Result>("RP_TransferMedicine", medicalPharmacyGUIDParameter, medicalItemGUIDParameter, medicalPharmacologicalFormGUIDParameter, startDateParameter, endDateParameter, lANParameter);
        }
    
        public virtual ObjectResult<RP_BeneficiaryDetails_Result> RP_BeneficiaryDetails(string medicalPharmacyGUID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string lAN)
        {
            var medicalPharmacyGUIDParameter = medicalPharmacyGUID != null ?
                new ObjectParameter("MedicalPharmacyGUID", medicalPharmacyGUID) :
                new ObjectParameter("MedicalPharmacyGUID", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var lANParameter = lAN != null ?
                new ObjectParameter("LAN", lAN) :
                new ObjectParameter("LAN", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RP_BeneficiaryDetails_Result>("RP_BeneficiaryDetails", medicalPharmacyGUIDParameter, startDateParameter, endDateParameter, lANParameter);
        }
    
        public virtual ObjectResult<RP_DiscrepancyMedicine_Result> RP_DiscrepancyMedicine(string medicalPharmacyGUID, string medicalItemGUID, string medicalPharmacologicalFormGUID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string lAN)
        {
            var medicalPharmacyGUIDParameter = medicalPharmacyGUID != null ?
                new ObjectParameter("MedicalPharmacyGUID", medicalPharmacyGUID) :
                new ObjectParameter("MedicalPharmacyGUID", typeof(string));
    
            var medicalItemGUIDParameter = medicalItemGUID != null ?
                new ObjectParameter("MedicalItemGUID", medicalItemGUID) :
                new ObjectParameter("MedicalItemGUID", typeof(string));
    
            var medicalPharmacologicalFormGUIDParameter = medicalPharmacologicalFormGUID != null ?
                new ObjectParameter("MedicalPharmacologicalFormGUID", medicalPharmacologicalFormGUID) :
                new ObjectParameter("MedicalPharmacologicalFormGUID", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var lANParameter = lAN != null ?
                new ObjectParameter("LAN", lAN) :
                new ObjectParameter("LAN", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RP_DiscrepancyMedicine_Result>("RP_DiscrepancyMedicine", medicalPharmacyGUIDParameter, medicalItemGUIDParameter, medicalPharmacologicalFormGUIDParameter, startDateParameter, endDateParameter, lANParameter);
        }
    
        public virtual ObjectResult<spMedicalItem_Result> spMedicalItem(string lan)
        {
            var lanParameter = lan != null ?
                new ObjectParameter("Lan", lan) :
                new ObjectParameter("Lan", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spMedicalItem_Result>("spMedicalItem", lanParameter);
        }
    
        public virtual ObjectResult<RP_ConsumptionMedicine_Result> RP_ConsumptionMedicine(string medicalPharmacyGUID, string medicalItemGUID, string medicalPharmacologicalFormGUID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string lAN)
        {
            var medicalPharmacyGUIDParameter = medicalPharmacyGUID != null ?
                new ObjectParameter("MedicalPharmacyGUID", medicalPharmacyGUID) :
                new ObjectParameter("MedicalPharmacyGUID", typeof(string));
    
            var medicalItemGUIDParameter = medicalItemGUID != null ?
                new ObjectParameter("MedicalItemGUID", medicalItemGUID) :
                new ObjectParameter("MedicalItemGUID", typeof(string));
    
            var medicalPharmacologicalFormGUIDParameter = medicalPharmacologicalFormGUID != null ?
                new ObjectParameter("MedicalPharmacologicalFormGUID", medicalPharmacologicalFormGUID) :
                new ObjectParameter("MedicalPharmacologicalFormGUID", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var lANParameter = lAN != null ?
                new ObjectParameter("LAN", lAN) :
                new ObjectParameter("LAN", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RP_ConsumptionMedicine_Result>("RP_ConsumptionMedicine", medicalPharmacyGUIDParameter, medicalItemGUIDParameter, medicalPharmacologicalFormGUIDParameter, startDateParameter, endDateParameter, lANParameter);
        }
    
        public virtual ObjectResult<CalaculateDetailClosingBalanceEMT_Result> CalaculateDetailClosingBalanceEMT(Nullable<int> yearVal, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string medicalPharmacyGUID, string medicalItemGUID)
        {
            var yearValParameter = yearVal.HasValue ?
                new ObjectParameter("YearVal", yearVal) :
                new ObjectParameter("YearVal", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var medicalPharmacyGUIDParameter = medicalPharmacyGUID != null ?
                new ObjectParameter("MedicalPharmacyGUID", medicalPharmacyGUID) :
                new ObjectParameter("MedicalPharmacyGUID", typeof(string));
    
            var medicalItemGUIDParameter = medicalItemGUID != null ?
                new ObjectParameter("MedicalItemGUID", medicalItemGUID) :
                new ObjectParameter("MedicalItemGUID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CalaculateDetailClosingBalanceEMT_Result>("CalaculateDetailClosingBalanceEMT", yearValParameter, startDateParameter, endDateParameter, medicalPharmacyGUIDParameter, medicalItemGUIDParameter);
        }
    
        public virtual int CalculateClosingBalanceEMT(Nullable<int> yearVal, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string medicalPharmacyGUID)
        {
            var yearValParameter = yearVal.HasValue ?
                new ObjectParameter("YearVal", yearVal) :
                new ObjectParameter("YearVal", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var medicalPharmacyGUIDParameter = medicalPharmacyGUID != null ?
                new ObjectParameter("MedicalPharmacyGUID", medicalPharmacyGUID) :
                new ObjectParameter("MedicalPharmacyGUID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CalculateClosingBalanceEMT", yearValParameter, startDateParameter, endDateParameter, medicalPharmacyGUIDParameter);
        }
    
        public virtual ObjectResult<spAuditHistoryOld_Result> spAuditHistoryOld(string languageID, Nullable<System.Guid> recordGUID)
        {
            var languageIDParameter = languageID != null ?
                new ObjectParameter("LanguageID", languageID) :
                new ObjectParameter("LanguageID", typeof(string));
    
            var recordGUIDParameter = recordGUID.HasValue ?
                new ObjectParameter("RecordGUID", recordGUID) :
                new ObjectParameter("RecordGUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spAuditHistoryOld_Result>("spAuditHistoryOld", languageIDParameter, recordGUIDParameter);
        }
    
        public virtual ObjectResult<spAuditHistory_Result> spAuditHistory(string languageID, Nullable<System.Guid> recordGUID)
        {
            var languageIDParameter = languageID != null ?
                new ObjectParameter("LanguageID", languageID) :
                new ObjectParameter("LanguageID", typeof(string));
    
            var recordGUIDParameter = recordGUID.HasValue ?
                new ObjectParameter("RecordGUID", recordGUID) :
                new ObjectParameter("RecordGUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spAuditHistory_Result>("spAuditHistory", languageIDParameter, recordGUIDParameter);
        }
    }
}
